{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overcrowded \u2693\ufe0e Overcrowded makes it easy to control player and AI movement with a suite of context aware steering actions, a cutting edge local avoidance algorithm and automatic jobified multithreaded pathfinding. ( Asset Store ) ( Discord ) ( Issue Tracker ) Context Aware Steering \u2693\ufe0e Context aware steering allows blending of many actions without the indecisiveness seen in classic steering behaviours. Steering sensors are a novel systems which allows hinting where an agent should not go, allowing more nuanced control from a greater variety of gameplay signals. Overcrowded includes a library of steering actions and sensors that can be used to build complex movement AI entirely in the editor. Cutting Edge Local Avoidance \u2693\ufe0e Local avoidance subtly adjusts how agents move to make large crowds flow naturally. The unique Time-Sampled Velocity Obstacles (TSVO) algorithm can find avoidance solutions in the densest and most chaotic of crowds. Where other algorithms will fail to find a solution, TSVO's multi-stage fall back, crossing avoidance, and intelligent sample selection ensures your agents (including players) can weave through any crowd. Ultimate Performance \u2693\ufe0e Built on the Data Oriented Technology Stack (DOTS) but controlled through familiar GameObjects and inspectors: Overcrowded brings the latest performance advances while allowing developers to leverage their existing Unity expertise. Overcrowded automatically runs all steering evaluation, pathfinding and local avoidance on Unity's high performance multi-threaded job system. Pathfinding \u2693\ufe0e Leverage your existing Unity NavMesh based scenes. Overcrowded integrates Unity's latest DOTS-compatible pathfinder API with our own path query runtime to offload pathfinding work onto the multi-threaded job system. Simultaneously compute hundreds of paths and never worry about the frame rate. Get Going in Minutes \u2693\ufe0e Overcrowded can be dropped into your game and configured entirely with drag-and-drop MonoBehaviour scripts. With the drop-in replacement for Unity's NavMeshAgent script you can get up and running in a matter of minutes. Comprehensive documentation and demo scenes will help you learn how to make the best use of all the available features. Complete Source Code \u2693\ufe0e All of the C# source code for Overcrowded is included in the package, there are no closed source components. Buy Now On The Asset Store \u2764\ufe0f Learn More \u2693\ufe0e Concepts \u2693\ufe0e Context Aware Steering Actions Scene Sensing Realtime Local Avoidance Jobified Pathfinding Getting Started \u2693\ufe0e Quick Start Dependencies Demo Scenes How To Create An Agent How To Replace A Nav Mesh Agent Reference Docs \u2693\ufe0e Navigator Steer For Arrival Circle Sensor Urgency Zone Enhanced Nav Mesh Agent","title":"Home"},{"location":"#overcrowded","text":"Overcrowded makes it easy to control player and AI movement with a suite of context aware steering actions, a cutting edge local avoidance algorithm and automatic jobified multithreaded pathfinding. ( Asset Store ) ( Discord ) ( Issue Tracker )","title":"Overcrowded"},{"location":"#context-aware-steering","text":"Context aware steering allows blending of many actions without the indecisiveness seen in classic steering behaviours. Steering sensors are a novel systems which allows hinting where an agent should not go, allowing more nuanced control from a greater variety of gameplay signals. Overcrowded includes a library of steering actions and sensors that can be used to build complex movement AI entirely in the editor.","title":"Context Aware Steering"},{"location":"#cutting-edge-local-avoidance","text":"Local avoidance subtly adjusts how agents move to make large crowds flow naturally. The unique Time-Sampled Velocity Obstacles (TSVO) algorithm can find avoidance solutions in the densest and most chaotic of crowds. Where other algorithms will fail to find a solution, TSVO's multi-stage fall back, crossing avoidance, and intelligent sample selection ensures your agents (including players) can weave through any crowd.","title":"Cutting Edge Local Avoidance"},{"location":"#ultimate-performance","text":"Built on the Data Oriented Technology Stack (DOTS) but controlled through familiar GameObjects and inspectors: Overcrowded brings the latest performance advances while allowing developers to leverage their existing Unity expertise. Overcrowded automatically runs all steering evaluation, pathfinding and local avoidance on Unity's high performance multi-threaded job system.","title":"Ultimate Performance"},{"location":"#pathfinding","text":"Leverage your existing Unity NavMesh based scenes. Overcrowded integrates Unity's latest DOTS-compatible pathfinder API with our own path query runtime to offload pathfinding work onto the multi-threaded job system. Simultaneously compute hundreds of paths and never worry about the frame rate.","title":"Pathfinding"},{"location":"#get-going-in-minutes","text":"Overcrowded can be dropped into your game and configured entirely with drag-and-drop MonoBehaviour scripts. With the drop-in replacement for Unity's NavMeshAgent script you can get up and running in a matter of minutes. Comprehensive documentation and demo scenes will help you learn how to make the best use of all the available features.","title":"Get Going in Minutes"},{"location":"#complete-source-code","text":"All of the C# source code for Overcrowded is included in the package, there are no closed source components. Buy Now On The Asset Store \u2764\ufe0f","title":"Complete Source Code"},{"location":"#learn-more","text":"","title":"Learn More"},{"location":"#concepts","text":"Context Aware Steering Actions Scene Sensing Realtime Local Avoidance Jobified Pathfinding","title":"Concepts"},{"location":"#getting-started","text":"Quick Start Dependencies Demo Scenes How To Create An Agent How To Replace A Nav Mesh Agent","title":"Getting Started"},{"location":"#reference-docs","text":"Navigator Steer For Arrival Circle Sensor Urgency Zone Enhanced Nav Mesh Agent","title":"Reference Docs"},{"location":"Advanced/CustomSteering/","text":"initial index","title":"Custom Steering Actions"},{"location":"Advanced/Pathfinding/","text":"Overcrowded includes a pathfinding system based on the built in Unity pathfinding system. The Overcrowded pathfinder performs all pathfinding work in a Job (multithreaded) and rate limits the amount of work done in each pathfinding job per frame so that pathfinding can never negatively impact frame rates. In most cases you do not need to interact directly with the Overcrowded pathfinding system. If you want an agent to follow a path you should use the GoalPosition of the agent. If you just want to find a path between two locations you can simply use the Unity pathfinding APIs . Creating A Pathfinding Job \u2693\ufe0e Pathfinding jobs are represented as entities with a PathfindingQuery component and an optional PathfindingQueryCost buffer: // Create a `NavMeshQuery` to find start/end points using ( var q = new NavMeshQuery ( NavMeshWorld . GetDefaultWorld (), Allocator . Persistent )) { // Convert start/end positions into navmesh locations var start = q . MapLocation ( start_position , size , agentType , areaMask ); var end = q . MapLocation ( end_position , size , agentType , areaMask ); // Create a new entity var entity = EntityManager . CreateEntity (); // Attach a query component EntityManager . AddComponentData ( entity , new PathfindingQuery ( NavMeshWorld . GetDefaultWorld (), start , end , areaMask )); // If you want to set area costs, do this: var buffer = EntityManager . AddBuffer < PathfindingQueryCost >( entity ); for ( var i = 0 ; i < 32 ; i ++) buffer . Add ( cost_of_area ( i )); } This will be scheduled in the pathfinding system and updated each frame. Each frame you can check for completion: var completed = EntityManager . HasComponent < PathfindingComplete >( entity ); Once the job is complete the PathfindingComplete component contains data about the completed job. The Status field indicates if the job was completed successfully, partial, or was a failure. var complete = EntityManager . GetComponentData < PathfindingComplete >( entity ); Debug . Log ( complete . Status ); If the job was completed successfully or partially the path geometry will be stored in two buffers. The portals buffer contains a list of lines which the agent must pass through in order to complete the path: var portals = EntityManager . GetBuffer < PathfindingResultPortal >( entity ); The polygons buffer contains a list of polygon IDs which makes up the path: var polygons = _manager . GetBuffer < PathfindingResultPolygon >( entity )","title":"Pathfinding"},{"location":"Advanced/Pathfinding/#creating-a-pathfinding-job","text":"Pathfinding jobs are represented as entities with a PathfindingQuery component and an optional PathfindingQueryCost buffer: // Create a `NavMeshQuery` to find start/end points using ( var q = new NavMeshQuery ( NavMeshWorld . GetDefaultWorld (), Allocator . Persistent )) { // Convert start/end positions into navmesh locations var start = q . MapLocation ( start_position , size , agentType , areaMask ); var end = q . MapLocation ( end_position , size , agentType , areaMask ); // Create a new entity var entity = EntityManager . CreateEntity (); // Attach a query component EntityManager . AddComponentData ( entity , new PathfindingQuery ( NavMeshWorld . GetDefaultWorld (), start , end , areaMask )); // If you want to set area costs, do this: var buffer = EntityManager . AddBuffer < PathfindingQueryCost >( entity ); for ( var i = 0 ; i < 32 ; i ++) buffer . Add ( cost_of_area ( i )); } This will be scheduled in the pathfinding system and updated each frame. Each frame you can check for completion: var completed = EntityManager . HasComponent < PathfindingComplete >( entity ); Once the job is complete the PathfindingComplete component contains data about the completed job. The Status field indicates if the job was completed successfully, partial, or was a failure. var complete = EntityManager . GetComponentData < PathfindingComplete >( entity ); Debug . Log ( complete . Status ); If the job was completed successfully or partially the path geometry will be stored in two buffers. The portals buffer contains a list of lines which the agent must pass through in order to complete the path: var portals = EntityManager . GetBuffer < PathfindingResultPortal >( entity ); The polygons buffer contains a list of polygon IDs which makes up the path: var polygons = _manager . GetBuffer < PathfindingResultPolygon >( entity )","title":"Creating A Pathfinding Job"},{"location":"Changelog/0.0.0/","text":"Overcrowded is not released yet. This is a test for the release notes. Todo: Remove this and replace with some actual 1.0.0 docs when it's released. Features \ud83c\udf89 \u2693\ufe0e All of them. More of them. Loads of them. So many features. Bug Fixes \ud83d\udc1e \u2693\ufe0e Lots of them. More of them. Loads of them. Known Issues \ud83d\udd25 \u2693\ufe0e Lots, that's why it's not released yet. More of them. Loads of them.","title":"0.0.0"},{"location":"Changelog/0.0.0/#features","text":"All of them. More of them. Loads of them. So many features.","title":"Features \ud83c\udf89"},{"location":"Changelog/0.0.0/#bug-fixes","text":"Lots of them. More of them. Loads of them.","title":"Bug Fixes \ud83d\udc1e"},{"location":"Changelog/0.0.0/#known-issues","text":"Lots, that's why it's not released yet. More of them. Loads of them.","title":"Known Issues \ud83d\udd25"},{"location":"GettingStarted/LocalAvoidance/","text":"Local Avoidance is one of the most important parts of achieving natural agent movement. The local avoidance system slightly adjusts the output from Context Aware Steering Actions to avoid collisions with other agents. This significantly improves the appearance of groups of agents moving in close proximity. Overcrowded includes a novel Time Sampled Local Avoidance algorithm which simultaneously chooses collision free movement directions for every agent in the scene. Using Local Avoidance \u2693\ufe0e Local Avoidance is built into the core Navigator MonoBehaviour. To use it simply create an agent , open the Navigator inspector, turn on Block Other Agents to make other agents avoid this agent and turn on Avoid Local Obstacles to make this agent avoid nearby obstacles (e.g. other agents). Urgency \u2693\ufe0e There will always be situations where a Local Avoidance algorithm will fail to find a collision free direction for some agents to move in. This can sometimes cause low priority agents to get stuck at the edges of a Crowd, failing to ever make any progress towards their destination. Overcrowded includes an innovative solution to this problem: Urgency. Urgency increases when an agent is not making any progress and temporarily makes the agent more \"selfish\" - this allows it to push past the obstacle that was stopping it. This selfishness can help clear blockages in crowds and significantly improves the overall flow of agents through the scene even in areas where other Local Avoidance algorithms would fail. To add Urgency to an agent simply add an Urgency MonoBehaviour alongside the Navigator MonoBehaviour. Configuring Local Avoidance \u2693\ufe0e With the default settings local avoidance will improve the movement of all agents around the scene. However, you may want to configure specific agents to move in a different way. For example all NPCs should avoid collisions with the player character even if it means colliding with other NPCs. All configuration is done by setting a range, not a specific value. The actual value used is randomly picked from the range. This means that if you spawn many agents from the same prefab they will all have slightly different configurations, this significantly improves the quality of movement of large groups of agents. Priority \u2693\ufe0e When two agents are walking towards a collision they must both adjust their movement direction to avoid the collision. Priority controls how much each agent is willing to adjust their direction. If both of these agents have an equal priority they will both adjust their direction the same amount (as shown above). If one agent has a slightly higher priority then it will adjust it's direction less than the agent with the lower priority. If one agent has a much higher priority (difference is greater than one) then it will not adjust it's direction at all, leaving the lower priority agent to to avoid the collision. This can be used to create more \"important\" agents which other agents will try not to block. For example: - Important storyline NPCs can have a much higher priority than basic \"crowd filler\" NPCs - Boss NPCs can have a higher priority than basic enemy NPCs - Player characters can have higher priority than allied NPCs Personality \u2693\ufe0e There are two different ways to configure the remaining Local Avoidance parameters: personality configuration or advanced configuration. When Personality Auto Configuration is enabled all of the Local Avoidance parameters are configured from just two parameters, \"Carefulness\" and \"Extraversion\". A very \"careful\" agent will try very hard to avoid collisions, even if it means frequently changing direction and moving erratically. A very \"extraverted\" agent will try very hard to push through other agents, even if it means extra collisions. When Personality Auto Configuration is disabled all of the Local Avoidance parameters can be configured directly. See the Navigator documentation for further detail on these settings.","title":"What Is Local Avoidance?"},{"location":"GettingStarted/LocalAvoidance/#using-local-avoidance","text":"Local Avoidance is built into the core Navigator MonoBehaviour. To use it simply create an agent , open the Navigator inspector, turn on Block Other Agents to make other agents avoid this agent and turn on Avoid Local Obstacles to make this agent avoid nearby obstacles (e.g. other agents).","title":"Using Local Avoidance"},{"location":"GettingStarted/LocalAvoidance/#urgency","text":"There will always be situations where a Local Avoidance algorithm will fail to find a collision free direction for some agents to move in. This can sometimes cause low priority agents to get stuck at the edges of a Crowd, failing to ever make any progress towards their destination. Overcrowded includes an innovative solution to this problem: Urgency. Urgency increases when an agent is not making any progress and temporarily makes the agent more \"selfish\" - this allows it to push past the obstacle that was stopping it. This selfishness can help clear blockages in crowds and significantly improves the overall flow of agents through the scene even in areas where other Local Avoidance algorithms would fail. To add Urgency to an agent simply add an Urgency MonoBehaviour alongside the Navigator MonoBehaviour.","title":"Urgency"},{"location":"GettingStarted/LocalAvoidance/#configuring-local-avoidance","text":"With the default settings local avoidance will improve the movement of all agents around the scene. However, you may want to configure specific agents to move in a different way. For example all NPCs should avoid collisions with the player character even if it means colliding with other NPCs. All configuration is done by setting a range, not a specific value. The actual value used is randomly picked from the range. This means that if you spawn many agents from the same prefab they will all have slightly different configurations, this significantly improves the quality of movement of large groups of agents.","title":"Configuring Local Avoidance"},{"location":"GettingStarted/LocalAvoidance/#priority","text":"When two agents are walking towards a collision they must both adjust their movement direction to avoid the collision. Priority controls how much each agent is willing to adjust their direction. If both of these agents have an equal priority they will both adjust their direction the same amount (as shown above). If one agent has a slightly higher priority then it will adjust it's direction less than the agent with the lower priority. If one agent has a much higher priority (difference is greater than one) then it will not adjust it's direction at all, leaving the lower priority agent to to avoid the collision. This can be used to create more \"important\" agents which other agents will try not to block. For example: - Important storyline NPCs can have a much higher priority than basic \"crowd filler\" NPCs - Boss NPCs can have a higher priority than basic enemy NPCs - Player characters can have higher priority than allied NPCs","title":"Priority"},{"location":"GettingStarted/LocalAvoidance/#personality","text":"There are two different ways to configure the remaining Local Avoidance parameters: personality configuration or advanced configuration. When Personality Auto Configuration is enabled all of the Local Avoidance parameters are configured from just two parameters, \"Carefulness\" and \"Extraversion\". A very \"careful\" agent will try very hard to avoid collisions, even if it means frequently changing direction and moving erratically. A very \"extraverted\" agent will try very hard to push through other agents, even if it means extra collisions. When Personality Auto Configuration is disabled all of the Local Avoidance parameters can be configured directly. See the Navigator documentation for further detail on these settings.","title":"Personality"},{"location":"GettingStarted/PathfindingJobs/","text":"Pathfinding Jobs \u2693\ufe0e Pathfinding can be a very slow operation if the scene is complex or the path is very long. It should not be run on the main thread to avoid low frame rates. The basic Unity NavMeshAgent sometimes calculates paths in a job (e.g. when using destination ) but makes it impossible to calculate paths for other purposes in jobs (e.g. when using CalculatePath ). Overcrowded solves this by calculating all paths in the Unity Job System, this spreads the work over multiple frames and all of the available CPU cores so that pathfinding work will never cause your game to stutter ! Migrating From A NavMesh Agent \u2693\ufe0e The pathfinding system built into Overcrowded is based on the Unity NavMesh and internally uses the normal Unity pathfinding algorithm. This makes it very easy to move from a Unity NavMeshAgent to an Overcrowded Navigator . See this guide for how to migrate from a Unity NavMeshAgent to an overcrowded EnhanceNavMeshAgent . Using Overcrowded Navigator \u2693\ufe0e Every Overcrowded agent includes a Navigator MonoBehaviour. This MonoBehaviour includes the FindPath methods which start a pathfinding job and returns a PathfindingTask object which represents the job. The job will run in the background over several frames, the PathfindingTask object can be polled to check if it is completed. Once the job is complete a PathfindingResult can be retrieved from the task object. Continued Reading \u2693\ufe0e How To: Find A Path a simple tutorial on how to find a path from scripts. How To: Follow A Path a simple tutorial on how to follow a path to a point. Navigator reference documentation for the Navigator MonoBehaviour. PathfindingTask reference documentation for the PathfindingTask . PathfindingResult reference documentation for the PathfindingResult .","title":"Jobified Pathfinding"},{"location":"GettingStarted/PathfindingJobs/#pathfinding-jobs","text":"Pathfinding can be a very slow operation if the scene is complex or the path is very long. It should not be run on the main thread to avoid low frame rates. The basic Unity NavMeshAgent sometimes calculates paths in a job (e.g. when using destination ) but makes it impossible to calculate paths for other purposes in jobs (e.g. when using CalculatePath ). Overcrowded solves this by calculating all paths in the Unity Job System, this spreads the work over multiple frames and all of the available CPU cores so that pathfinding work will never cause your game to stutter !","title":"Pathfinding Jobs"},{"location":"GettingStarted/PathfindingJobs/#migrating-from-a-navmesh-agent","text":"The pathfinding system built into Overcrowded is based on the Unity NavMesh and internally uses the normal Unity pathfinding algorithm. This makes it very easy to move from a Unity NavMeshAgent to an Overcrowded Navigator . See this guide for how to migrate from a Unity NavMeshAgent to an overcrowded EnhanceNavMeshAgent .","title":"Migrating From A NavMesh Agent"},{"location":"GettingStarted/PathfindingJobs/#using-overcrowded-navigator","text":"Every Overcrowded agent includes a Navigator MonoBehaviour. This MonoBehaviour includes the FindPath methods which start a pathfinding job and returns a PathfindingTask object which represents the job. The job will run in the background over several frames, the PathfindingTask object can be polled to check if it is completed. Once the job is complete a PathfindingResult can be retrieved from the task object.","title":"Using Overcrowded Navigator"},{"location":"GettingStarted/PathfindingJobs/#continued-reading","text":"How To: Find A Path a simple tutorial on how to find a path from scripts. How To: Follow A Path a simple tutorial on how to follow a path to a point. Navigator reference documentation for the Navigator MonoBehaviour. PathfindingTask reference documentation for the PathfindingTask . PathfindingResult reference documentation for the PathfindingResult .","title":"Continued Reading"},{"location":"GettingStarted/QuickStart/","text":"Getting Started \u2693\ufe0e Install Overcrowded from the Unity Asset Store. Install the required packages . Follow the how to create an agent guide. Add steering actions to control the movement of the agent around the scene. Add sensors to avoid things in the scene. Basic Concepts \u2693\ufe0e The Getting Started section of the docs explains the basic concepts of how Overcrowded works; what Local Avoidance is, how Context Aware Steering Actions solve the pitfalls of traditional steering behaviours and how Steering Sensors can inject gameplay into movement to create more intelligent behaviour. Demo Scenes \u2693\ufe0e Overcrowded includes a number of demo scenes which introduce the basic concepts of the system and demonstrate how to create some common scenarios. Get started with these demos by running the Start Here scene in the Assets/Plugins/PlaceholderSoftware/Crowds/Demos folder. If you're having trouble making an agent behave as you want in your scene try cloning the most similar demo scene and tweaking that. How To \u2693\ufe0e The How To section of the docs has a number of minimal tutorials for common scenarios. If you're not sure how to achieve something with Overcrowded try searching through these guides to see if one explains how to do what you want. Get Help \u2693\ufe0e If you're still stuck feel free to ask for help .","title":"Quick Start"},{"location":"GettingStarted/QuickStart/#getting-started","text":"Install Overcrowded from the Unity Asset Store. Install the required packages . Follow the how to create an agent guide. Add steering actions to control the movement of the agent around the scene. Add sensors to avoid things in the scene.","title":"Getting Started"},{"location":"GettingStarted/QuickStart/#basic-concepts","text":"The Getting Started section of the docs explains the basic concepts of how Overcrowded works; what Local Avoidance is, how Context Aware Steering Actions solve the pitfalls of traditional steering behaviours and how Steering Sensors can inject gameplay into movement to create more intelligent behaviour.","title":"Basic Concepts"},{"location":"GettingStarted/QuickStart/#demo-scenes","text":"Overcrowded includes a number of demo scenes which introduce the basic concepts of the system and demonstrate how to create some common scenarios. Get started with these demos by running the Start Here scene in the Assets/Plugins/PlaceholderSoftware/Crowds/Demos folder. If you're having trouble making an agent behave as you want in your scene try cloning the most similar demo scene and tweaking that.","title":"Demo Scenes"},{"location":"GettingStarted/QuickStart/#how-to","text":"The How To section of the docs has a number of minimal tutorials for common scenarios. If you're not sure how to achieve something with Overcrowded try searching through these guides to see if one explains how to do what you want.","title":"How To"},{"location":"GettingStarted/QuickStart/#get-help","text":"If you're still stuck feel free to ask for help .","title":"Get Help"},{"location":"GettingStarted/Requirements/","text":"Unity Package Manager \u2693\ufe0e Overcrowded requires several packages installed from the Unity package manager: Burst (1.3.9) Collections (0.9.0 - preview.6) Entities (0.11.2 - preview.1) Jobs (0.2.10 - preview.13) Mathematics (1.2.1) Unity.Physics (0.4.1) Overcrowded has been built and tested to work with the listed versions. As new versions of these packages are released we will update to support them as soon as possible. If you encounter a compatibility issue with any of these packages please report it on the issue tracker and we'll fix it right away. Note Overcrowded is built with DOTS, ECS and the Job System for the best performance with large numbers of agents. However, you do not have to understand ECS to use Overcrowded! Setup of agents is done with classic MonoBehaviours and GameObjects. Unity Version \u2693\ufe0e Overcrowded will support Unity LTS versions and the latest Unity TECH version starting with 2019.4 . If you have a compatibility problem with a supported version of the Editor please contact us through Discord , or report it on the issue tracker .","title":"Requirements"},{"location":"GettingStarted/Requirements/#unity-package-manager","text":"Overcrowded requires several packages installed from the Unity package manager: Burst (1.3.9) Collections (0.9.0 - preview.6) Entities (0.11.2 - preview.1) Jobs (0.2.10 - preview.13) Mathematics (1.2.1) Unity.Physics (0.4.1) Overcrowded has been built and tested to work with the listed versions. As new versions of these packages are released we will update to support them as soon as possible. If you encounter a compatibility issue with any of these packages please report it on the issue tracker and we'll fix it right away. Note Overcrowded is built with DOTS, ECS and the Job System for the best performance with large numbers of agents. However, you do not have to understand ECS to use Overcrowded! Setup of agents is done with classic MonoBehaviours and GameObjects.","title":"Unity Package Manager"},{"location":"GettingStarted/Requirements/#unity-version","text":"Overcrowded will support Unity LTS versions and the latest Unity TECH version starting with 2019.4 . If you have a compatibility problem with a supported version of the Editor please contact us through Discord , or report it on the issue tracker .","title":"Unity Version"},{"location":"GettingStarted/SteeringActions/","text":"Steering actions are a way of breaking down the complex job of steering an agent step-by-step through an environment. They were originally designed by Craig Reynolds in 1999. Steering actions each individually perform a single very simple type of movement, for example: Arrive at a position. Flee away from a position. Pursue a moving target by predicting it's movements. Evade a moving target by predicting it's movements. Wander randomly. Follow a path generated by pathfinding. An agent will often have several of these actions which are blended together to form more complex and natural movements. Context Aware Steering Actions \u2693\ufe0e Basic steering actions as described above have been used in many games over the years. However they have a serious problem: if two steering actions point in opposite directions the agent will not move at all! This can result in agents appearing indecisive as several conflicting actions pull them in opposite direction. A real person would make a decision and go to one of the two locations. Overcrowded solves this problem with \"Context Aware Steering Actions\". Each steering action outputs how much it wants to move in a direction and then a final decision is made by finding the most desirable direction to move in. This means that you can add any numbers of steering actions to influence the movement of an agent in many ways and the agent will still appear to be decisive. In the above example the steering actions would output that they want to move left and move right: The final decision picks the best direction - in this case because it's a tie an arbitrary decision is made. This is much more realistic than taking the average direction; a person who wants to walk to two locations won't move towards the midpoint they will instead walk to one or the other. The steering context is not just used for steering actions (deciding where to go) but can also be used for steering sensors (deciding where not to go). This can be used to inject gameplay considerations into the movement system, such as avoiding dangerous enemies. Read more about Steering Sensors . Multiple Steering Actions \u2693\ufe0e In Overcrowded, each type of steering action is represented by a MonoBehaviour. In some cases you may want several of the same steering action attached to a single Agent (e.g. Flee from 2 things simultaneously). However, Unity does not allow multiple copies of the same MonoBehaviour. To solve this problem the Overcrowded steering MonoBehaviours can each represent several copies of the same steering action: This SteerForFlee inspector shows two flee actions named FleeOne and FleeTwo fleeing from two different points. Continued Reading \u2693\ufe0e Steering Sensors adjust the steering context to discourage agents from walking in certain directions - such as towards gameplay dangers. Local Avoidance adjusts the output of context aware steering actions to avoid collisions with obstacles in the scene - such as walls and other agents. How To: Move To A Point A simple tutorial on how to use a single steering action.","title":"What Are Steering Actions?"},{"location":"GettingStarted/SteeringActions/#context-aware-steering-actions","text":"Basic steering actions as described above have been used in many games over the years. However they have a serious problem: if two steering actions point in opposite directions the agent will not move at all! This can result in agents appearing indecisive as several conflicting actions pull them in opposite direction. A real person would make a decision and go to one of the two locations. Overcrowded solves this problem with \"Context Aware Steering Actions\". Each steering action outputs how much it wants to move in a direction and then a final decision is made by finding the most desirable direction to move in. This means that you can add any numbers of steering actions to influence the movement of an agent in many ways and the agent will still appear to be decisive. In the above example the steering actions would output that they want to move left and move right: The final decision picks the best direction - in this case because it's a tie an arbitrary decision is made. This is much more realistic than taking the average direction; a person who wants to walk to two locations won't move towards the midpoint they will instead walk to one or the other. The steering context is not just used for steering actions (deciding where to go) but can also be used for steering sensors (deciding where not to go). This can be used to inject gameplay considerations into the movement system, such as avoiding dangerous enemies. Read more about Steering Sensors .","title":"Context Aware Steering Actions"},{"location":"GettingStarted/SteeringActions/#multiple-steering-actions","text":"In Overcrowded, each type of steering action is represented by a MonoBehaviour. In some cases you may want several of the same steering action attached to a single Agent (e.g. Flee from 2 things simultaneously). However, Unity does not allow multiple copies of the same MonoBehaviour. To solve this problem the Overcrowded steering MonoBehaviours can each represent several copies of the same steering action: This SteerForFlee inspector shows two flee actions named FleeOne and FleeTwo fleeing from two different points.","title":"Multiple Steering Actions"},{"location":"GettingStarted/SteeringActions/#continued-reading","text":"Steering Sensors adjust the steering context to discourage agents from walking in certain directions - such as towards gameplay dangers. Local Avoidance adjusts the output of context aware steering actions to avoid collisions with obstacles in the scene - such as walls and other agents. How To: Move To A Point A simple tutorial on how to use a single steering action.","title":"Continued Reading"},{"location":"GettingStarted/SteeringSensors/","text":"Steering Sensors are a unique feature of the Overcrowded steering system. A Steering Action tells the agent where it should go, whereas steering sensors tell an agent where it should not go. A steering sensor will never make an agent move, instead it simply influences the movement caused by steering actions. This can be used to inject gameplay considerations, such as avoiding dangerous areas or enemies, directly into the steering decisions of agents in the game. For example in this image a steering sensor is creating an area the agent should avoid, shown by the red circle. A Steer For Arrival action is telling the agent to move directly towards the end point, along the dotted blue line. Instead the agent path has curved around to avoid the middle of the danger zone, as shown by the solid white line. A single agent can be influenced by many steering sensors simultaneously. Overcrowded includes a library of easy to use sensors which can be adapted to many different scenarious: CircleSensor - avoid a circular area centred on a point. LineSensor - avoid moving directly towards a line. PointSensor - avoid moving towards a specific point. GameObjectSensor - avoid another GameObject. NegativeDirectionZone - influences all agents within a physics zone to avoid moving in specific directions. Continued Reading \u2693\ufe0e Steering Actions drive an agent to move in a specific direction. Local Avoidance adjusts the output of context aware steering actions to avoid collisions with obstacles in the scene - such as walls and other agents. How To: Avoid Danger A simple tutorial on how to use a single sensor.","title":"What Are Steering Sensors?"},{"location":"GettingStarted/SteeringSensors/#continued-reading","text":"Steering Actions drive an agent to move in a specific direction. Local Avoidance adjusts the output of context aware steering actions to avoid collisions with obstacles in the scene - such as walls and other agents. How To: Avoid Danger A simple tutorial on how to use a single sensor.","title":"Continued Reading"},{"location":"GettingStarted/Support/","text":"Ask For Advice \u2693\ufe0e If you're unsure how to do something with Overcrowded you can contact us through Discord or by email (admin@placeholder-software.co.uk). We will generally be quicker to respond on Discord. Request A Feature \u2693\ufe0e If there's something missing from Overcrowded which you'd like to see implemented discuss it with us on Discord or open a feature request on the issue tracker . Report An Issue \u2693\ufe0e If you encounter a bug with Overcrowded, no matter how minor please report it on the issue tracker .","title":"Getting Help"},{"location":"GettingStarted/Support/#ask-for-advice","text":"If you're unsure how to do something with Overcrowded you can contact us through Discord or by email (admin@placeholder-software.co.uk). We will generally be quicker to respond on Discord.","title":"Ask For Advice"},{"location":"GettingStarted/Support/#request-a-feature","text":"If there's something missing from Overcrowded which you'd like to see implemented discuss it with us on Discord or open a feature request on the issue tracker .","title":"Request A Feature"},{"location":"GettingStarted/Support/#report-an-issue","text":"If you encounter a bug with Overcrowded, no matter how minor please report it on the issue tracker .","title":"Report An Issue"},{"location":"GettingStarted/DemoScenes/","text":"Demo Scenes \u2693\ufe0e Overcrowded includes a number of scenes which demonstrate how to use all the parts of the packages. These demo scenes can be found in Assets\\Plugins\\PlaceholderSoftware\\Crowds\\Demos . The Start Here.unity scene is a menu which can launch all other demo scenes. Basic Demo Scenes \u2693\ufe0e These scenes demonstrate the basic concepts of Overcrowded: Steering Actions Steering Sensors Zones Local Avoidance \u2693\ufe0e These scenes demonstrate basic usage of local avoidance: todo: local avoidance scenes Complex Demo Scenes \u2693\ufe0e These scenes are more complete scenes which demonstrate how to combine multiple Overcrowded behaviours to achieve more complex movements: todo: complex multi-behaviour scenes (e.g. crossing)","title":"Index"},{"location":"GettingStarted/DemoScenes/#demo-scenes","text":"Overcrowded includes a number of scenes which demonstrate how to use all the parts of the packages. These demo scenes can be found in Assets\\Plugins\\PlaceholderSoftware\\Crowds\\Demos . The Start Here.unity scene is a menu which can launch all other demo scenes.","title":"Demo Scenes"},{"location":"GettingStarted/DemoScenes/#basic-demo-scenes","text":"These scenes demonstrate the basic concepts of Overcrowded: Steering Actions Steering Sensors Zones","title":"Basic Demo Scenes"},{"location":"GettingStarted/DemoScenes/#local-avoidance","text":"These scenes demonstrate basic usage of local avoidance: todo: local avoidance scenes","title":"Local Avoidance"},{"location":"GettingStarted/DemoScenes/#complex-demo-scenes","text":"These scenes are more complete scenes which demonstrate how to combine multiple Overcrowded behaviours to achieve more complex movements: todo: complex multi-behaviour scenes (e.g. crossing)","title":"Complex Demo Scenes"},{"location":"GettingStarted/DemoScenes/LocalAvoidance/","text":"todo","title":"4. Local Avoidance"},{"location":"GettingStarted/DemoScenes/Sensors/","text":"Basic Steering Sensors \u2693\ufe0e Overcrowded includes a demo scene for each basic steering sensor. Steering sensors tell an agent which directions not to move in - an agent will not actively steer away from them but will simply avoid trying to steer towards them. These scenes can be found in the Assets\\Plugins\\PlaceholderSoftware\\Crowds\\Demos\\Basics folder. The BasicCircleSensor scene demonstrates an agent using arrival steering to move in a straight line towards a point. The circular sensor causes the agent to avoid the middle of the scene. The BasicGameObjectSensor scene demonstrates an agent using arrival steering to move in a straight line towards a point. The game object sensor functions exactly the same as the circle sensor, but it is centred on a GameObject in the scene. The BasicLineSensor scene demonstrates an agent using arrival steering to move in a straight line towards a point. The line sensor causes the agent to avoid a line across the middle of the scene. The BasicPointSensor scene demonstrates an agent using arrival steering to move in a straight line towards a point. The point sensor causes the agent to avoid a single point in the middle of the scene.","title":"2. Steering Sensors"},{"location":"GettingStarted/DemoScenes/Sensors/#basic-steering-sensors","text":"Overcrowded includes a demo scene for each basic steering sensor. Steering sensors tell an agent which directions not to move in - an agent will not actively steer away from them but will simply avoid trying to steer towards them. These scenes can be found in the Assets\\Plugins\\PlaceholderSoftware\\Crowds\\Demos\\Basics folder. The BasicCircleSensor scene demonstrates an agent using arrival steering to move in a straight line towards a point. The circular sensor causes the agent to avoid the middle of the scene. The BasicGameObjectSensor scene demonstrates an agent using arrival steering to move in a straight line towards a point. The game object sensor functions exactly the same as the circle sensor, but it is centred on a GameObject in the scene. The BasicLineSensor scene demonstrates an agent using arrival steering to move in a straight line towards a point. The line sensor causes the agent to avoid a line across the middle of the scene. The BasicPointSensor scene demonstrates an agent using arrival steering to move in a straight line towards a point. The point sensor causes the agent to avoid a single point in the middle of the scene.","title":"Basic Steering Sensors"},{"location":"GettingStarted/DemoScenes/Steering/","text":"Basic Steering Actions \u2693\ufe0e Overcrowded includes a demo scene for each basic steering action. Steering actions tell an agent which direction and how fast to move. Overcrowded combines all of these steering actions into one context and then picks the single best direction. These scenes can be found in the Assets\\Plugins\\PlaceholderSoftware\\Crowds\\Demos\\Basics folder. The BasicSteerForAlignment scene demonstrates alignment steering which aligns the agent with the movement direction of nearby agents. This scene includes several other agent which simply walk in a straight line, to influence the main agent as it passes by. The BasicSteerForArrival scene demonstrates arrival steering which moves towards a point and comes to a stop when it arrives. The BasicSteerForCohesion scene demonstrates cohesion steering which moves an agent towards the average position of nearby agents. This scene includes several other agents which simply move to randomly generated points, the main agent stays in the middle of them. The BasicSteerForEvade scene demonstrates evasion steering which predicts the future position of another agent and steers to avoid it. The scene includes a player controlled agent which the other agent attempts to evade. The BasicSteerForFlee scene demonstrates flee steering which moves directly away from a specific point. The BasicSteerForGoal scene demonstrates goal steering which finds a path from the agent to the given destination and then follows the path to it. The BasicSteerForInterpose scene demonstrates interpose steering which steers an agent to stay between two other agents. The BasicSteerForPursue scene demonstrates pursuit steering which predicts the future position of another agent and steers towards it. The scene includes a player controlled agent which the other agent attempts to pursue. The BasicSteerForTargetSpeed scene demonstrates speed steering which steers an agent at a given speed in no particular direction. The agent in this scene has \"local avoidance\" enabled to steer away from walls which block it's path. The BasicSteerForVelocity scene demonstrates velocity steering which steers an agent in a specific direction. The agent in this scene is player controlled, the Steer User Input script copies the velocity into the TargetVelocity Steering behaviour. The BasicSteerForWander scene demonstrates wander steering which steers an agent randomly.","title":"1. Steering Actions"},{"location":"GettingStarted/DemoScenes/Steering/#basic-steering-actions","text":"Overcrowded includes a demo scene for each basic steering action. Steering actions tell an agent which direction and how fast to move. Overcrowded combines all of these steering actions into one context and then picks the single best direction. These scenes can be found in the Assets\\Plugins\\PlaceholderSoftware\\Crowds\\Demos\\Basics folder. The BasicSteerForAlignment scene demonstrates alignment steering which aligns the agent with the movement direction of nearby agents. This scene includes several other agent which simply walk in a straight line, to influence the main agent as it passes by. The BasicSteerForArrival scene demonstrates arrival steering which moves towards a point and comes to a stop when it arrives. The BasicSteerForCohesion scene demonstrates cohesion steering which moves an agent towards the average position of nearby agents. This scene includes several other agents which simply move to randomly generated points, the main agent stays in the middle of them. The BasicSteerForEvade scene demonstrates evasion steering which predicts the future position of another agent and steers to avoid it. The scene includes a player controlled agent which the other agent attempts to evade. The BasicSteerForFlee scene demonstrates flee steering which moves directly away from a specific point. The BasicSteerForGoal scene demonstrates goal steering which finds a path from the agent to the given destination and then follows the path to it. The BasicSteerForInterpose scene demonstrates interpose steering which steers an agent to stay between two other agents. The BasicSteerForPursue scene demonstrates pursuit steering which predicts the future position of another agent and steers towards it. The scene includes a player controlled agent which the other agent attempts to pursue. The BasicSteerForTargetSpeed scene demonstrates speed steering which steers an agent at a given speed in no particular direction. The agent in this scene has \"local avoidance\" enabled to steer away from walls which block it's path. The BasicSteerForVelocity scene demonstrates velocity steering which steers an agent in a specific direction. The agent in this scene is player controlled, the Steer User Input script copies the velocity into the TargetVelocity Steering behaviour. The BasicSteerForWander scene demonstrates wander steering which steers an agent randomly.","title":"Basic Steering Actions"},{"location":"GettingStarted/DemoScenes/Zones/","text":"Basic Steering Actions \u2693\ufe0e Overcrowded includes a demo scene for each basic zones. Zones affect all agents within the zone and can be used to tweak how agents move in certain areas of the scene. These scenes can be found in the Assets\\Plugins\\PlaceholderSoftware\\Crowds\\Demos\\Basics folder. The BasicNegativeZone scene demonstrates a negative zone which acts as a danger sensor for agents inside it. The zone in this scene is configured to discourage movement along the length of the zone, but to allow movement directly across the zone. The BasicPriorityZone scene demonstrates a priority zone which increases the priority of agents inside it. When two agents are on a collision course lower priority agents will yield to higher priority agents. The BasicUrgencyZone scene demonstrates an urgency zone which increases the urgency of agents inside it. Agents with a higher urgency act more selfishly to more effectively push their way through dense crowds.","title":"3. Steering Zones"},{"location":"GettingStarted/DemoScenes/Zones/#basic-steering-actions","text":"Overcrowded includes a demo scene for each basic zones. Zones affect all agents within the zone and can be used to tweak how agents move in certain areas of the scene. These scenes can be found in the Assets\\Plugins\\PlaceholderSoftware\\Crowds\\Demos\\Basics folder. The BasicNegativeZone scene demonstrates a negative zone which acts as a danger sensor for agents inside it. The zone in this scene is configured to discourage movement along the length of the zone, but to allow movement directly across the zone. The BasicPriorityZone scene demonstrates a priority zone which increases the priority of agents inside it. When two agents are on a collision course lower priority agents will yield to higher priority agents. The BasicUrgencyZone scene demonstrates an urgency zone which increases the urgency of agents inside it. Agents with a higher urgency act more selfishly to more effectively push their way through dense crowds.","title":"Basic Steering Actions"},{"location":"HowTo/AnimatedAgents/","text":"Overcrowded agents are very similar to Unity NavMeshAgents with respect to Animation - the navigation system outputs a velocity which should be followed and an animation script is responsible for starting an animation that will move the agent in this direction. Much of the advice in the Unity documentation on Coupling Animation and Navigation is relevant. Synchroniser \u2693\ufe0e The most common approach to moving agents in sync with Overcrowded is to use the Synchroniser script. If this is configured in the editor to the Simulation Is Master mode the GameObject will be moved around under the control of the Overcrowded simulation. However in this mode there is no animation, the agent simply slides around the scene. To drive animation the Synchroniser should instead be set to the GameObject Is Master mode, in this mode the GameObject will not move at all and the simulation will be reset to the GameObject position at the start of every frame. Animation Script \u2693\ufe0e Now that the agent is not moving it is possible to write an animation script which will move the agent using animation in response to Overcrowded simulation output. Most scripts to drive animation will follow a similar template: private void Awake () { // Get animation controller _animator = GetComponentInChildren < Animator >(); // Get Overcrowded agent _navigator = GetComponent < Navigator >(); } private void Update () { // Step 1: Fetch the velocity which the agent should move at according to the simulation var target_velocity = GetComponent < Navigator >(). AdjustedVelocity ; // Step 2: Choose which animation to play based on the `target_velocity`. How to do this depends // on what how you have set up your animation controller. See `UnityChanNavigationAgent.cs` for an example. ??? // Step 3: Move the agent in the scene according to the animation that you have chosen. transform . position += velocity_from_animation * Time . deltaTime ; // Step 4: Inform Overcrowded simulation what velocity the agent is moving at. _navigator . Velocity = velocity_from_animation ; } There is an example of a script which does this included in the package at Assets/Plugins/PlaceholderSoftware/Crowds/Demos/Content/Characters/UnityChan/Scripts/UnityChanNavigationAgent.cs . This script drives an agent ( Unity Chan ) set up with an Animation Blend Tree : The animation blend tree is set up with animations for run/walk/reverse while leaning left/center/right. There are two animation parameters which select blend of animations to play: Direction (Left/Right) and Speed (Forward/backward). The UnityChanNavigationAgent script uses: _animator . SetFloat ( \"Speed\" , speed_value ); _animator . SetFloat ( \"Direction\" , direction_value ); to set the blend of which animation to play. Velocity Matching \u2693\ufe0e The velocity that an agent actually moves with does not have to closely follow the Overcrowded simulation output. AdjustedVelocity simply exposes the best velocity to move at according to Overcrowded - your script can tweak this value slightly (e.g. to exactly match an available animation) or even ignore it completely if necessary. Setting the _nevigator.Velocity property (step 4 in the example above) informs Overcrowded how the agent actually moved. The UnityChanNavigationAgent.cs script demonstrates this when reversing. When the simulation wants the agent to move backwards (at any speed) the script will use a slow walk backwards animation. After reversing for a short amount of time the agent will stop, spin on the spot, and begin walking forwards. A simple continuous velocity from overcrowded is turned into a complex sequence of animations.","title":"Animate An Agent"},{"location":"HowTo/AnimatedAgents/#synchroniser","text":"The most common approach to moving agents in sync with Overcrowded is to use the Synchroniser script. If this is configured in the editor to the Simulation Is Master mode the GameObject will be moved around under the control of the Overcrowded simulation. However in this mode there is no animation, the agent simply slides around the scene. To drive animation the Synchroniser should instead be set to the GameObject Is Master mode, in this mode the GameObject will not move at all and the simulation will be reset to the GameObject position at the start of every frame.","title":"Synchroniser"},{"location":"HowTo/AnimatedAgents/#animation-script","text":"Now that the agent is not moving it is possible to write an animation script which will move the agent using animation in response to Overcrowded simulation output. Most scripts to drive animation will follow a similar template: private void Awake () { // Get animation controller _animator = GetComponentInChildren < Animator >(); // Get Overcrowded agent _navigator = GetComponent < Navigator >(); } private void Update () { // Step 1: Fetch the velocity which the agent should move at according to the simulation var target_velocity = GetComponent < Navigator >(). AdjustedVelocity ; // Step 2: Choose which animation to play based on the `target_velocity`. How to do this depends // on what how you have set up your animation controller. See `UnityChanNavigationAgent.cs` for an example. ??? // Step 3: Move the agent in the scene according to the animation that you have chosen. transform . position += velocity_from_animation * Time . deltaTime ; // Step 4: Inform Overcrowded simulation what velocity the agent is moving at. _navigator . Velocity = velocity_from_animation ; } There is an example of a script which does this included in the package at Assets/Plugins/PlaceholderSoftware/Crowds/Demos/Content/Characters/UnityChan/Scripts/UnityChanNavigationAgent.cs . This script drives an agent ( Unity Chan ) set up with an Animation Blend Tree : The animation blend tree is set up with animations for run/walk/reverse while leaning left/center/right. There are two animation parameters which select blend of animations to play: Direction (Left/Right) and Speed (Forward/backward). The UnityChanNavigationAgent script uses: _animator . SetFloat ( \"Speed\" , speed_value ); _animator . SetFloat ( \"Direction\" , direction_value ); to set the blend of which animation to play.","title":"Animation Script"},{"location":"HowTo/AnimatedAgents/#velocity-matching","text":"The velocity that an agent actually moves with does not have to closely follow the Overcrowded simulation output. AdjustedVelocity simply exposes the best velocity to move at according to Overcrowded - your script can tweak this value slightly (e.g. to exactly match an available animation) or even ignore it completely if necessary. Setting the _nevigator.Velocity property (step 4 in the example above) informs Overcrowded how the agent actually moved. The UnityChanNavigationAgent.cs script demonstrates this when reversing. When the simulation wants the agent to move backwards (at any speed) the script will use a slow walk backwards animation. After reversing for a short amount of time the agent will stop, spin on the spot, and begin walking forwards. A simple continuous velocity from overcrowded is turned into a complex sequence of animations.","title":"Velocity Matching"},{"location":"HowTo/AvoidDanger/","text":"Create an agent . Add a GameObjectSensor . Click Add New and give the sensor a unique name. Drag the game object which represents the danger into the Menace field. Set the Negative Weight to a value greater than zero. This controls how important this danger is relative to other sensors . A weight of 0 disables this sensor. Set the Negative Min Distance to a distance where there is maximum danger. If the agent is this close (or closer) it will be sensing the full Negative Weight you have set. Set the Negative Max Distance to a distance where there is no danger. If this agent is this far (or farther) there is no danger detected from this sensor.","title":"Avoid Danger"},{"location":"HowTo/CreateAnAgent/","text":"Create a new GameObject in the scene Add a Navigator behaviour. Add a Convert To Entity behaviour and configure it like this: Add a Synchroniser behaviour and configure it like this: Add Steering Behaviours to make the agent move.","title":"Create A New Agent"},{"location":"HowTo/FindPath/","text":"Note To make an agent walk along a path, follow this guide instead. The Navigator MonoBehaviour has two methods ( 1 , 2 ) to find a path from an agent to a destination. Basic FindPath \u2693\ufe0e To find a path from an agent to a position, first call FindPath Navigator agent = GetComponent<Navigator>(); Vector3 destination; var task = agent.FindPath(destination); This returns a PathfindingTask which represents the pathfinding job running on another thread. It may take several frames to finish if the path is very long or the pathfinder is very busy. Advanced Pathfind \u2693\ufe0e There is another FindPath method which allows configuration of many more parameters, including the start and end position: Navigator agent = GetComponent<Navigator>(); Vector3 start; Vector3 end; int areaMask; int agentType; var task = agent.FindPath(start, end, areaMask, agentType); This method also returns a PathfindingTask . Querying A Pathfinding Task \u2693\ufe0e To cancel the a PathfindingTask at any time before it is finished: task.Dispose(); Each frame check if the job is finished by trying to get a PathfindingResult from it: var result = task.TryGetResult(); if (result.HasValue) { // Pathfinding is finished } else { // Pathfinding is still running } The result may represent a pathfind which completed with a failure, for example if there is no path to the destination. This can be checked with the IsFailure property: if (result.IsFailure) { // Pathfind failure } else { // Pathfind success } The result can be used to retrieve the polygons in the path: var polys = result.Value.TryGetPathPolygons(); Or the portals in the path: var portals = result.Value.TryGetPathPortals(); Both polys and portals will be null if the pathfind was a failure.","title":"Find A Path"},{"location":"HowTo/FindPath/#basic-findpath","text":"To find a path from an agent to a position, first call FindPath Navigator agent = GetComponent<Navigator>(); Vector3 destination; var task = agent.FindPath(destination); This returns a PathfindingTask which represents the pathfinding job running on another thread. It may take several frames to finish if the path is very long or the pathfinder is very busy.","title":"Basic FindPath"},{"location":"HowTo/FindPath/#advanced-pathfind","text":"There is another FindPath method which allows configuration of many more parameters, including the start and end position: Navigator agent = GetComponent<Navigator>(); Vector3 start; Vector3 end; int areaMask; int agentType; var task = agent.FindPath(start, end, areaMask, agentType); This method also returns a PathfindingTask .","title":"Advanced Pathfind"},{"location":"HowTo/FindPath/#querying-a-pathfinding-task","text":"To cancel the a PathfindingTask at any time before it is finished: task.Dispose(); Each frame check if the job is finished by trying to get a PathfindingResult from it: var result = task.TryGetResult(); if (result.HasValue) { // Pathfinding is finished } else { // Pathfinding is still running } The result may represent a pathfind which completed with a failure, for example if there is no path to the destination. This can be checked with the IsFailure property: if (result.IsFailure) { // Pathfind failure } else { // Pathfind success } The result can be used to retrieve the polygons in the path: var polys = result.Value.TryGetPathPolygons(); Or the portals in the path: var portals = result.Value.TryGetPathPortals(); Both polys and portals will be null if the pathfind was a failure.","title":"Querying A Pathfinding Task"},{"location":"HowTo/FollowPath/","text":"Note To find a path without following it, follow this guide instead. To use pathfinding you must check Enable Pathing on the Navigator behaviour. Add a Steer For Goal behaviour to the agent. Set a destination for the agent. There are two ways to do this: Set the GoalPosition property on the Navigator behaviour from a script. Add a Goal behaviour to the agent and set a transform as the destination.","title":"Follow A Path"},{"location":"HowTo/MoveToAPoint/","text":"Without Pathfinding \u2693\ufe0e Create an agent . Add a SteerForArrival component. Click Add New and give the steering action a unique name. Set the target X/Y position in the Target fields. Choose a Slowing Distance , this sets how far before arriving at the target the agent starts slowing to a stop. Set the Weight to 1.0 . this sets how important this steering action is relative to other steering actions . A weight of 0 disables this steering action. Set the Speed Type to Ideal and the Speed to 1 . This will make the agent move to target target point at the Ideal Speed .","title":"Move To A Point"},{"location":"HowTo/MoveToAPoint/#without-pathfinding","text":"Create an agent . Add a SteerForArrival component. Click Add New and give the steering action a unique name. Set the target X/Y position in the Target fields. Choose a Slowing Distance , this sets how far before arriving at the target the agent starts slowing to a stop. Set the Weight to 1.0 . this sets how important this steering action is relative to other steering actions . A weight of 0 disables this steering action. Set the Speed Type to Ideal and the Speed to 1 . This will make the agent move to target target point at the Ideal Speed .","title":"Without Pathfinding"},{"location":"HowTo/PlayerControl/","text":"Agents can be controlled by player input by using the SteerForTargetVelocity behaviour and a custom script which reads player Input and sets the SteeringVector property. There is a basic example script included in the package at Assets/Plugins/PlaceholderSoftware/Crowds/Demos/Content/Scripts/SteerUserInput.cs . The Navigator behaviour of a player driven agent should be configured to to move through the crowd very aggressively so that other agents tend to move out of it's way, this keeps the movement of the agent closely tied to the input from the player. This can be achieved in two ways. Local Avoidance \u2693\ufe0e Agents are influenced by Local Avoidance which influences their movement to avoid obstacles such as walls and other agents. However this can cause the player character to make movements which the player did not command. The simplest way to solve this is to disable Avoid other Agents and enable Block Other Agents . In this configuration other agents will avoid the player character but the player character will completely ignore other agents - it will move exactly as commanded by the SteerForTargetVelocity behaviour. This creates the most responsive movement but will cause the player character to collide with other agents if the input changes suddenly. An better solution is to tweak the Navigator parameters so that it avoids other agents just a small amount, this creates a more natural looking agent which moves through the crowd smoothly but still responds quickly to player movement. Increase Priority to a very high value, this will cause other agents to do most (but not all) of the work of avoiding a collision. Reduce Carefulness to a very low value, this will cause the agent to be less erratic as it avoids other agents. Increase Extraversion to a very high value, this will cause other agents to prioritise avoiding this agent more than other agents. A more advanced solution could tweak these parameters at runtime in response to input/gameplay events. For example when walking the player character can have a less aggressive configuration, when running the values can be boosted to more extreme values.","title":"Drive An Agent With Player Input"},{"location":"HowTo/PlayerControl/#local-avoidance","text":"Agents are influenced by Local Avoidance which influences their movement to avoid obstacles such as walls and other agents. However this can cause the player character to make movements which the player did not command. The simplest way to solve this is to disable Avoid other Agents and enable Block Other Agents . In this configuration other agents will avoid the player character but the player character will completely ignore other agents - it will move exactly as commanded by the SteerForTargetVelocity behaviour. This creates the most responsive movement but will cause the player character to collide with other agents if the input changes suddenly. An better solution is to tweak the Navigator parameters so that it avoids other agents just a small amount, this creates a more natural looking agent which moves through the crowd smoothly but still responds quickly to player movement. Increase Priority to a very high value, this will cause other agents to do most (but not all) of the work of avoiding a collision. Reduce Carefulness to a very low value, this will cause the agent to be less erratic as it avoids other agents. Increase Extraversion to a very high value, this will cause other agents to prioritise avoiding this agent more than other agents. A more advanced solution could tweak these parameters at runtime in response to input/gameplay events. For example when walking the player character can have a less aggressive configuration, when running the values can be boosted to more extreme values.","title":"Local Avoidance"},{"location":"HowTo/ReplaceNavMeshAgent/","text":"The Unity NavMeshAgent is a basic component for controlling characters in a game - if you already have characters in a game it is likely you're already using this component to drive them. Overcrowded has a \"drop in\" MonoBehaviour called the EnhancedNavMeshAgent which replaces almost all of the functionality of the NavMeshAgent with better alternatives. To migrate from the NavMeshAgent : Add an EnhancedNavMeshAgent component to the GameObject, this will automatically add several other components. Ensure that the Convert To Entity script that was automatically added is configured like this: . Click Import From Nav Mesh Agent to copy settings from the NavMeshAgent script. Click Auto Configure Synchroniser to automatically set up synchronisation between the ECS simulation and the GameObject.","title":"Replace A NavMeshAgent"},{"location":"HowTo/SolveBadFlow/","text":"Overcrowded includes a Local Avoidance system which attempts to tweak the path of all agents to avoid collisions. However this does not always provide satisfactory results and some extra hand-tweaking is required. Urgency \u2693\ufe0e Urgency is a parameter which increases rapidly when an agent is failing to move in the direction it wants. As an agent becomes more urgent it's priority increases, which makes it less willing to yield to other agents. A very urgent agent will create an invisible obstacle which other agents avoid, opening up a gap for the urgent agent to move into. If you have problems with agents failing to make progress because other agents are blocking their path, consider adding an Urgency behaviour. Urgency is very cheap to calculate and in general should be added to all agents. Urgency Zone \u2693\ufe0e An Urgency Zone increases the urgency of an agent which is within the zone. If you have an area of the map which agents are getting stuck in because of large numbers of other agents getting in their way consider adding an urgency zone which covers the agent getting stuck. Priority Zone \u2693\ufe0e A Priority Zone is very similar to an urgency zone - agents inside the zone will have increase \"priority\" and will become less willing you yield to other agents. Unlike an urgency zone high priority does not create the invisible obstacles to push apart the crowd. If you have an area of the map which agents are getting stuck in because of higher priority agents taking precedence consider adding a priority zone which covers the agent getting stuck. Negative Zone \u2693\ufe0e A Negative Zone discourages flow in certain directions. if you have an area of the map where agents are causing a problem because they are moving in certain directions (e.g. across a busy corridor, instead of along it) consider adding a negative zone to discourage the troublesome direction.","title":"Solve Bad Flow"},{"location":"HowTo/SolveBadFlow/#urgency","text":"Urgency is a parameter which increases rapidly when an agent is failing to move in the direction it wants. As an agent becomes more urgent it's priority increases, which makes it less willing to yield to other agents. A very urgent agent will create an invisible obstacle which other agents avoid, opening up a gap for the urgent agent to move into. If you have problems with agents failing to make progress because other agents are blocking their path, consider adding an Urgency behaviour. Urgency is very cheap to calculate and in general should be added to all agents.","title":"Urgency"},{"location":"HowTo/SolveBadFlow/#urgency-zone","text":"An Urgency Zone increases the urgency of an agent which is within the zone. If you have an area of the map which agents are getting stuck in because of large numbers of other agents getting in their way consider adding an urgency zone which covers the agent getting stuck.","title":"Urgency Zone"},{"location":"HowTo/SolveBadFlow/#priority-zone","text":"A Priority Zone is very similar to an urgency zone - agents inside the zone will have increase \"priority\" and will become less willing you yield to other agents. Unlike an urgency zone high priority does not create the invisible obstacles to push apart the crowd. If you have an area of the map which agents are getting stuck in because of higher priority agents taking precedence consider adding a priority zone which covers the agent getting stuck.","title":"Priority Zone"},{"location":"HowTo/SolveBadFlow/#negative-zone","text":"A Negative Zone discourages flow in certain directions. if you have an area of the map where agents are causing a problem because they are moving in certain directions (e.g. across a busy corridor, instead of along it) consider adding a negative zone to discourage the troublesome direction.","title":"Negative Zone"},{"location":"HowTo/TraverseOffMesh/","text":"Off Mesh Links are a feature of the Unity navmesh system, and off mesh link represents a connection that can be traversed but not by walking. For example, jumping over a gap or climbing up a ladder. The SteerForGoal behaviour controls the movement of an agent along a path, including off-mesh links. Auto Complete \u2693\ufe0e To automatically complete off-mesh links when the agent gets to them (by teleporting to the end) enable Auto Complete Off Mesh Links in the inspector or set AutocompleteOffMeshLinks = true in a script. Script Completion \u2693\ufe0e Instead of teleporting across an off-mesh link an animation or gameplay event will usually need to be triggered. To check if the agent is approaching an off-mesh link check the IsApproachingOffMeshLink property every frame. When an agent is approaching a link (i.e. there are no more turns in the path between the agent and the start of the link) it will begin using SteerForArrival behaviour to slow down and stop at the start of the link. When approaching an off-mesh link use the DistanceToOffMeshLink property to detect how far away from the start of the link the agent is. Once an agent has arrived a the link it will not move until the link is completed, check the IsWaitingAtOffMeshLink property to detect this state. In this state you can move the agent however you like (e.g. trigger an animation). One the agent has finished traversing the link (e.g. the animation has finished) call the CompleteOffMeshLink method. This accepts 2 parameters: teleport and checkOffPath . The teleport parameter specifies what kind of action the agent should take - set it to true to teleport to the end of the link, set it to false to plan a new path to the destination from where the agent is standing. The checkOffPath parameter specifies when the action (teleport/repath) should be taken - set to true to only take action if the agent is not on the path which was already planned, set to false to always take the specified action. For example if an animation is played to move across the link call CompleteOffMeshLink(false, true) when the animation is completed to cause the agent to continue pathing to the destination, (planning a new path only if necessary).","title":"Traverse Off-Mesh Links"},{"location":"HowTo/TraverseOffMesh/#auto-complete","text":"To automatically complete off-mesh links when the agent gets to them (by teleporting to the end) enable Auto Complete Off Mesh Links in the inspector or set AutocompleteOffMeshLinks = true in a script.","title":"Auto Complete"},{"location":"HowTo/TraverseOffMesh/#script-completion","text":"Instead of teleporting across an off-mesh link an animation or gameplay event will usually need to be triggered. To check if the agent is approaching an off-mesh link check the IsApproachingOffMeshLink property every frame. When an agent is approaching a link (i.e. there are no more turns in the path between the agent and the start of the link) it will begin using SteerForArrival behaviour to slow down and stop at the start of the link. When approaching an off-mesh link use the DistanceToOffMeshLink property to detect how far away from the start of the link the agent is. Once an agent has arrived a the link it will not move until the link is completed, check the IsWaitingAtOffMeshLink property to detect this state. In this state you can move the agent however you like (e.g. trigger an animation). One the agent has finished traversing the link (e.g. the animation has finished) call the CompleteOffMeshLink method. This accepts 2 parameters: teleport and checkOffPath . The teleport parameter specifies what kind of action the agent should take - set it to true to teleport to the end of the link, set it to false to plan a new path to the destination from where the agent is standing. The checkOffPath parameter specifies when the action (teleport/repath) should be taken - set to true to only take action if the agent is not on the path which was already planned, set to false to always take the specified action. For example if an animation is played to move across the link call CompleteOffMeshLink(false, true) when the animation is completed to cause the agent to continue pathing to the destination, (planning a new path only if necessary).","title":"Script Completion"},{"location":"Reference/MonoBehaviours/BaseComponentProxyBehaviour/","text":"Warning This article mentions the Unity ECS. Although Overcrowded uses the ECS internally you don't need to understand anything about the ECS to use Overcrowded! BaseComponentProxyBehaviour \u2693\ufe0e This is an abstract class which is used as the base for most behaviours. You do not need to use this class unless you are extending Overcrowded. The class manages a set of ECS components which are controlled by the behaviour. The underlying components are managed so that they can easily be modified through serialization (at design time in the editor), at initialisation time (before the Entity representation is created) and at runtime (directly reading/writing the ECS data). It also handles automatically setting up and tearing down the components appropriately. Wrapping A Component \u2693\ufe0e To use this class to add a component to the ECS version of a gameObject you need to do five things: Create A new MonoBehaviour Create nested Component class Create field for new component class Register it Expose properties public class ANewThing // (1) Define a MonoBehaviour to add to a gameObject : BaseComponentProxyBehaviour { [Serializable] // Must be `Serializable` for editing to work private class MyComponentWrapper // (2) : Component < MyComponent > // Pass in your ECS component type as generic parameter { public MyComponentWrapper () : base ( true ) // Boolean indicates if this component is enabled by default { } } // (3) Create an instance of the component wrapper [SerializeField] private MyComponentWrapper _myComponentWrapper = new MyComponentWrapper (); // (4) Register the component wrapper with the management system protected override void RegisterComponents () { Register ( _myComponentWrapper ); } // (5) Expose properties of the component public float SomeValue { // To get the component data read it directly from the `Value` field get { return _myComponentWrapper . Value . SomeValue ; } // To set the component data copy it, modify it and write it set { var v = _myComponentWrapper . Value ; // Read/Copy v . SomeValue = value ; // Modify _myComponentWrapper . Value = v ; // Write } } } This basic pattern allows you to manage ECS components without worrying about the details of serialization, initialisation and teardown.","title":"BaseComponentProxyBehaviour"},{"location":"Reference/MonoBehaviours/BaseComponentProxyBehaviour/#basecomponentproxybehaviour","text":"This is an abstract class which is used as the base for most behaviours. You do not need to use this class unless you are extending Overcrowded. The class manages a set of ECS components which are controlled by the behaviour. The underlying components are managed so that they can easily be modified through serialization (at design time in the editor), at initialisation time (before the Entity representation is created) and at runtime (directly reading/writing the ECS data). It also handles automatically setting up and tearing down the components appropriately.","title":"BaseComponentProxyBehaviour"},{"location":"Reference/MonoBehaviours/BaseComponentProxyBehaviour/#wrapping-a-component","text":"To use this class to add a component to the ECS version of a gameObject you need to do five things: Create A new MonoBehaviour Create nested Component class Create field for new component class Register it Expose properties public class ANewThing // (1) Define a MonoBehaviour to add to a gameObject : BaseComponentProxyBehaviour { [Serializable] // Must be `Serializable` for editing to work private class MyComponentWrapper // (2) : Component < MyComponent > // Pass in your ECS component type as generic parameter { public MyComponentWrapper () : base ( true ) // Boolean indicates if this component is enabled by default { } } // (3) Create an instance of the component wrapper [SerializeField] private MyComponentWrapper _myComponentWrapper = new MyComponentWrapper (); // (4) Register the component wrapper with the management system protected override void RegisterComponents () { Register ( _myComponentWrapper ); } // (5) Expose properties of the component public float SomeValue { // To get the component data read it directly from the `Value` field get { return _myComponentWrapper . Value . SomeValue ; } // To set the component data copy it, modify it and write it set { var v = _myComponentWrapper . Value ; // Read/Copy v . SomeValue = value ; // Modify _myComponentWrapper . Value = v ; // Write } } } This basic pattern allows you to manage ECS components without worrying about the details of serialization, initialisation and teardown.","title":"Wrapping A Component"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/","text":"This MonoBehaviour is a direct replacement for the Unity NavMeshAgent MonoBehaviour. It implements the same properties and methods but internally is an Overcrowded agent. This provides an easy path to migrate from a traditional NavMeshAgent based system to the higher quality Overcrowded system. Migration \u2693\ufe0e To migrate a GameObject from a NavMeshAgent : Add the Enhanced Nav Mesh Agent script to the GameObject. This will automatically create several other MonoBehaviours ( Synchroniser , Entity Identity , Convert To Entity , Navigator , Steer For Goal ). Click Import From Nav Mesh Agent to automatically copy all of the settings from the Nav Mesh Agent MonoBehaviour and disable it. Click Auto Configure Overcrowded to automatically configure some default settings on the Overcrowded MonoBehaviours. Differences \u2693\ufe0e The Enhanced Nav Mesh Agent does not implement all of the properties of the Nav Mesh Agent : autoBraking - Not Implemented. Overcrowded always uses autoBraking style behaviour. nextPosition.set - Not Implemented. Open a feature request if you need this feature. velocity.set - Not Implemented. Open a feature request if you need this feature. currentOffMeshLinkData.activated - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API. currentOffMeshLinkData.linkType - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API. currentOffMeshLinkData.offMeshLink - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API. nextOffMeshLinkData.activated - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API. nextOffMeshLinkData.linkType - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API. nextOffMeshLinkData.offMeshLink - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API. navMeshOwner - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API. Inspector \u2693\ufe0e Import From Nav mesh Agent \u2693\ufe0e Automatically copies settings from a Unity NavMeshAgent MonoBehaviour to this EnhancedNavmeshAgent and disables the NavMeshAgent . Auto Configure Overcrowded \u2693\ufe0e Automatically configures Overcrowded MonoBehaviours to act in a similar way to the Unity NavMeshAgent . Agent Type \u2693\ufe0e Sets which nav meshes this agent can move on. Equivalent to Overcrowded Navigator.AgentType property. Base Offset \u2693\ufe0e Set the vertical offset between the navmesh point and the GameObject transform. Equivalent to Overcrowded Synchroniser.BaseOffset Speed \u2693\ufe0e Sets the maximum speed of this Agent. Equivalent to Overcrowded Navigator.MaximumSpeed property. Angular Speed \u2693\ufe0e Sets the maximum turning speed of this Agent (degrees/second). Equivalent to Overcrowded Navigator.MaximumAngularSpeed property. Acceleration \u2693\ufe0e Get/set the maximum acceleration of this Agent. Equivalent to Overcrowded Navigator.MaximumAcceleration property. Stopping Distance \u2693\ufe0e Get/set how far before the end of a path the agent should begin slowing to a stop. Equivalent to Overcrowded SteerForGoal.SlowingDistance property. Auto Braking \u2693\ufe0e Disabling this is not supported by Overcrowded. Always enabled. Radius \u2693\ufe0e Get/set the radius of this agent when avoiding collisions with other agents. Equivalent to Overcrowded Navigator.Radius property. Height \u2693\ufe0e Get/set the height of this agent when avoiding collisions with other agents. Equivalent to Overcrowded Navigator.Height property. Quality \u2693\ufe0e Get/set the quality of local avoidance algorithm to use. Currently Overcrowded does not support multiple quality levels. Setting this to None is equivalent to setting the Navigator.AvoidOtherAgents property to false. Setting this to any other value is equivalent to setting Navigator.AvoidOtherAgents to true Priority \u2693\ufe0e Get/set the priority of this agent compared to other agents in local avoidance, a higher priority will cause other agents to yield if they are in the way of this agent. Equivalent to Overcrowded Navigator.Priority property. Auto Traverse Off Mesh Link \u2693\ufe0e Get/set if this agent should automatically teleport across off-mesh links. Equivalent to Overcrowded SteerForGoal.AutocompleteOffMeshLinks property. Auto Repath \u2693\ufe0e Get/set if this agent should automatically generate a new path to the goal when the path becomes stale (e.g. the goal moves). Equivalent to Overcrowded Navigator.EnableAutoRepathing property. Area Mask \u2693\ufe0e Get/set the area mask to use for pathfinding queries. Equivalent to Overcrowded Navigator.EnableAutoRepathing property. Scripting \u2693\ufe0e Most of the scripting methods in the EnhancedNavMeshAgent are the same as the basic NavMeshAgent . Refer to the Unity documentation . This section documents methods/properties which are different from the normal Unity version. bool SetPath([NotNull] NavMeshPath pathIn) \u2693\ufe0e Performs the same function as NavMeshAgent.SetPath . However, this is marked as Obsolete in the EnhancedNavMeshAgent because it encourages extra allocations which are bad for performance. If possible, use the alternative bool SetPath(in PathfindingResult pathIn) method instead. bool SetPath(in PathfindingResult pathIn) \u2693\ufe0e Performs the same function as the basic SetPath method. This version is more performant. bool CalculatePath(...) \u2693\ufe0e Performs the same function as NavMeshAgent.CalculatePath . However, this is marked as Obsolete in the EnhancedNavMeshAgent because it encourages extra allocations which are bad for performance and also performs pathfinding on the main game thread which is very bad for performance. If possible use the alternative CalculatePathAsync method instead. PathfindingTask CalculatePathAsync(Vector3 targetPosition, int nodePoolSize = 4096) \u2693\ufe0e Begins calculating a path from the current agent position to the targetPosition . Unlike the CalculatePath method this starts the pathfinding work on a background thread, this means it does not impact performance by stalling the main thread. // Start pathfind var task = agent . CalculatePathAsync ( target ); // Every frame, check if it's complete yet var result = task . TryGetResult (); if ( result . HasValue ) { // Use path here ... // Dispose result when you are done result . Dispose (); }","title":"EnhancedNavMeshAgent"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#migration","text":"To migrate a GameObject from a NavMeshAgent : Add the Enhanced Nav Mesh Agent script to the GameObject. This will automatically create several other MonoBehaviours ( Synchroniser , Entity Identity , Convert To Entity , Navigator , Steer For Goal ). Click Import From Nav Mesh Agent to automatically copy all of the settings from the Nav Mesh Agent MonoBehaviour and disable it. Click Auto Configure Overcrowded to automatically configure some default settings on the Overcrowded MonoBehaviours.","title":"Migration"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#differences","text":"The Enhanced Nav Mesh Agent does not implement all of the properties of the Nav Mesh Agent : autoBraking - Not Implemented. Overcrowded always uses autoBraking style behaviour. nextPosition.set - Not Implemented. Open a feature request if you need this feature. velocity.set - Not Implemented. Open a feature request if you need this feature. currentOffMeshLinkData.activated - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API. currentOffMeshLinkData.linkType - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API. currentOffMeshLinkData.offMeshLink - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API. nextOffMeshLinkData.activated - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API. nextOffMeshLinkData.linkType - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API. nextOffMeshLinkData.offMeshLink - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API. navMeshOwner - It is not possible for Overcrowded to get this information from the Unity low level pathfinding API.","title":"Differences"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#import-from-nav-mesh-agent","text":"Automatically copies settings from a Unity NavMeshAgent MonoBehaviour to this EnhancedNavmeshAgent and disables the NavMeshAgent .","title":"Import From Nav mesh Agent"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#auto-configure-overcrowded","text":"Automatically configures Overcrowded MonoBehaviours to act in a similar way to the Unity NavMeshAgent .","title":"Auto Configure Overcrowded"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#agent-type","text":"Sets which nav meshes this agent can move on. Equivalent to Overcrowded Navigator.AgentType property.","title":"Agent Type"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#base-offset","text":"Set the vertical offset between the navmesh point and the GameObject transform. Equivalent to Overcrowded Synchroniser.BaseOffset","title":"Base Offset"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#speed","text":"Sets the maximum speed of this Agent. Equivalent to Overcrowded Navigator.MaximumSpeed property.","title":"Speed"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#angular-speed","text":"Sets the maximum turning speed of this Agent (degrees/second). Equivalent to Overcrowded Navigator.MaximumAngularSpeed property.","title":"Angular Speed"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#acceleration","text":"Get/set the maximum acceleration of this Agent. Equivalent to Overcrowded Navigator.MaximumAcceleration property.","title":"Acceleration"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#stopping-distance","text":"Get/set how far before the end of a path the agent should begin slowing to a stop. Equivalent to Overcrowded SteerForGoal.SlowingDistance property.","title":"Stopping Distance"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#auto-braking","text":"Disabling this is not supported by Overcrowded. Always enabled.","title":"Auto Braking"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#radius","text":"Get/set the radius of this agent when avoiding collisions with other agents. Equivalent to Overcrowded Navigator.Radius property.","title":"Radius"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#height","text":"Get/set the height of this agent when avoiding collisions with other agents. Equivalent to Overcrowded Navigator.Height property.","title":"Height"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#quality","text":"Get/set the quality of local avoidance algorithm to use. Currently Overcrowded does not support multiple quality levels. Setting this to None is equivalent to setting the Navigator.AvoidOtherAgents property to false. Setting this to any other value is equivalent to setting Navigator.AvoidOtherAgents to true","title":"Quality"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#priority","text":"Get/set the priority of this agent compared to other agents in local avoidance, a higher priority will cause other agents to yield if they are in the way of this agent. Equivalent to Overcrowded Navigator.Priority property.","title":"Priority"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#auto-traverse-off-mesh-link","text":"Get/set if this agent should automatically teleport across off-mesh links. Equivalent to Overcrowded SteerForGoal.AutocompleteOffMeshLinks property.","title":"Auto Traverse Off Mesh Link"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#auto-repath","text":"Get/set if this agent should automatically generate a new path to the goal when the path becomes stale (e.g. the goal moves). Equivalent to Overcrowded Navigator.EnableAutoRepathing property.","title":"Auto Repath"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#area-mask","text":"Get/set the area mask to use for pathfinding queries. Equivalent to Overcrowded Navigator.EnableAutoRepathing property.","title":"Area Mask"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#scripting","text":"Most of the scripting methods in the EnhancedNavMeshAgent are the same as the basic NavMeshAgent . Refer to the Unity documentation . This section documents methods/properties which are different from the normal Unity version.","title":"Scripting"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#bool-setpathnotnull-navmeshpath-pathin","text":"Performs the same function as NavMeshAgent.SetPath . However, this is marked as Obsolete in the EnhancedNavMeshAgent because it encourages extra allocations which are bad for performance. If possible, use the alternative bool SetPath(in PathfindingResult pathIn) method instead.","title":"bool SetPath([NotNull] NavMeshPath pathIn)"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#bool-setpathin-pathfindingresult-pathin","text":"Performs the same function as the basic SetPath method. This version is more performant.","title":"bool SetPath(in PathfindingResult pathIn)"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#bool-calculatepath","text":"Performs the same function as NavMeshAgent.CalculatePath . However, this is marked as Obsolete in the EnhancedNavMeshAgent because it encourages extra allocations which are bad for performance and also performs pathfinding on the main game thread which is very bad for performance. If possible use the alternative CalculatePathAsync method instead.","title":"bool CalculatePath(...)"},{"location":"Reference/MonoBehaviours/EnhancedNavMeshAgent/#pathfindingtask-calculatepathasyncvector3-targetposition-int-nodepoolsize-4096","text":"Begins calculating a path from the current agent position to the targetPosition . Unlike the CalculatePath method this starts the pathfinding work on a background thread, this means it does not impact performance by stalling the main thread. // Start pathfind var task = agent . CalculatePathAsync ( target ); // Every frame, check if it's complete yet var result = task . TryGetResult (); if ( result . HasValue ) { // Use path here ... // Dispose result when you are done result . Dispose (); }","title":"PathfindingTask CalculatePathAsync(Vector3 targetPosition, int nodePoolSize = 4096)"},{"location":"Reference/MonoBehaviours/EntityIdentity/","text":"This MonoBehaviour automatically maintains a connection between a GameObject in the scene and an ECS Entity which is used in the simulation. Warning This article mentions the Unity ECS. Although Overcrowded uses the ECS internally you don't need to understand anything about the ECS to use Overcrowded! Inspector \u2693\ufe0e Keep Alive \u2693\ufe0e If this is not checked then the underlying Entity will automatically be deleted when this EntityIdentity MonoBehaviour is deleted. This should be left unchecked unless you are managing the lifetime of ECS Entities with your own code. Script Properties \u2693\ufe0e Entity \u2693\ufe0e Get the entity which represents this gameObject. Will be default value when IsCreated is false . EntityManager \u2693\ufe0e The EntityManager used to create the entity. Will be null when IsCreated is false . IsCreated \u2693\ufe0e Indicates if the Entity for this gameObject has been created yet. KeepAlive \u2693\ufe0e If set to false the Entity will be deleted when OnDestroy runs for this MonoBehaviour.","title":"Entity Identity"},{"location":"Reference/MonoBehaviours/EntityIdentity/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/EntityIdentity/#keep-alive","text":"If this is not checked then the underlying Entity will automatically be deleted when this EntityIdentity MonoBehaviour is deleted. This should be left unchecked unless you are managing the lifetime of ECS Entities with your own code.","title":"Keep Alive"},{"location":"Reference/MonoBehaviours/EntityIdentity/#script-properties","text":"","title":"Script Properties"},{"location":"Reference/MonoBehaviours/EntityIdentity/#entity","text":"Get the entity which represents this gameObject. Will be default value when IsCreated is false .","title":"Entity"},{"location":"Reference/MonoBehaviours/EntityIdentity/#entitymanager","text":"The EntityManager used to create the entity. Will be null when IsCreated is false .","title":"EntityManager"},{"location":"Reference/MonoBehaviours/EntityIdentity/#iscreated","text":"Indicates if the Entity for this gameObject has been created yet.","title":"IsCreated"},{"location":"Reference/MonoBehaviours/EntityIdentity/#keepalive","text":"If set to false the Entity will be deleted when OnDestroy runs for this MonoBehaviour.","title":"KeepAlive"},{"location":"Reference/MonoBehaviours/Goal/","text":"Goal \u2693\ufe0e This MonoBehaviour automatically sets the GoalPosition , GoalRadius and GoalVelocity properties on a Navigator agent. Inspector \u2693\ufe0e Navigator \u2693\ufe0e The Navigator to set the properties on. If set to null then it will be automatically fetched using GetComponent<Navigator>() . CopyVelocity \u2693\ufe0e If this is set to true the GoalVelocity property of the Navigator is set based on the velocity of the Position gameObject. The velocity is determined from: - If the Position gameObject has a Navigator component it's velocity will be copied. - Otherwise if the Position gameObject has a RigidBody then it's velocity will be copied. - Otherwise no velocity will be set. Position \u2693\ufe0e The Transform to set as the goal position. Radius \u2693\ufe0e The radius of the goal position.","title":"Goal"},{"location":"Reference/MonoBehaviours/Goal/#goal","text":"This MonoBehaviour automatically sets the GoalPosition , GoalRadius and GoalVelocity properties on a Navigator agent.","title":"Goal"},{"location":"Reference/MonoBehaviours/Goal/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Goal/#navigator","text":"The Navigator to set the properties on. If set to null then it will be automatically fetched using GetComponent<Navigator>() .","title":"Navigator"},{"location":"Reference/MonoBehaviours/Goal/#copyvelocity","text":"If this is set to true the GoalVelocity property of the Navigator is set based on the velocity of the Position gameObject. The velocity is determined from: - If the Position gameObject has a Navigator component it's velocity will be copied. - Otherwise if the Position gameObject has a RigidBody then it's velocity will be copied. - Otherwise no velocity will be set.","title":"CopyVelocity"},{"location":"Reference/MonoBehaviours/Goal/#position","text":"The Transform to set as the goal position.","title":"Position"},{"location":"Reference/MonoBehaviours/Goal/#radius","text":"The radius of the goal position.","title":"Radius"},{"location":"Reference/MonoBehaviours/Navigator/","text":"Navigator \u2693\ufe0e This MonoBehaviour is the main behaviour which configures a gameObject as an intelligent Agent. Inspector \u2693\ufe0e Note Some of the following properties set a range instead of a single value, when the agent is first initialised it will choose a random value in this range. This means that if you instantiate many prefabs of the same agent prefab they will all act slightly differently. This gives a more natural look to large groups of agents. Radius \u2693\ufe0e The radius of the agent in the simulation. Other agents will never attempt to walk within this circle. Height \u2693\ufe0e The height of the agent in the simulation. The agent will avoid obstacles (e.g. walls and other agents) which are within it's height span. Agent Type \u2693\ufe0e Agent type used for pathfinding. Available types are configured in the Unity navigation window: Window > AI > Navigation > Agents . Area Mask \u2693\ufe0e The area mask which defines the walkable areas for this agent. Pathing \u2693\ufe0e Enable Pathfinding \u2693\ufe0e Allow this entity to find a path to it's goal (if it has a goal). Disable Automatic Repathing \u2693\ufe0e Disable automatically finding a new path when the path becomes stale (e.g. the goal moves). Repath Time \u2693\ufe0e How often (measured in seconds) the path will be automatically recalculated. Repath Off Path Time \u2693\ufe0e If the agent is not on it's calculated path for this many seconds the path will be automatically recalculated. Path Lookahead Distance \u2693\ufe0e How far ahead of the agent should path points be calculated. Steering \u2693\ufe0e Negative Mode \u2693\ufe0e These options configure how the negative signal from steering sensors are interpreted when selecting a steering direction. See here for more detail on steering sensors. None - negative signals will be completely ignored. This will prevent all steering sensors from affecting this agent. Multiply - inverse negative signal will be multiple with steering direction weight, reducing the weight of steering signals by the negative weight. This produces smoother steering and is the best option to use when there are many negative signals affecting an agent. Mask Min - only steering directions in the minimum danger area are allowed, all other steering directions will not be chosen. This produces the most \"cautious\" steering but it is very likely that an agent using this mode will not be able to arrive at a specific destination if there is a danger sensed in that direction. Use this mode when an agent absolutely must not approach dangers and the actual direction it moves is not very important (e.g. wildlife). Mask Max - steering directions in the maximum danger area are not allowed, all other steering directions are unaffected by danger sensors. This produces the least \"cautious\" steering, but it is very likely that the agent will be able to move to it's destination unless the danger is at the same location. Use this mode when there is just one very important danger influencing an agent. Negative Threshold \u2693\ufe0e Configures the threshold used for the negative mode. None - threshold does nothing. Multiply - threshold does nothing. Mask Min - all dangers signals within the threshold of the actual minimum are also treated as the minimum. Mask Max - all danger signals within the threshold of the actual maximum are also treated as the maximum. Positive Search Count \u2693\ufe0e Set how many directions will be tested to pick a final movement direction. Less directions makes all steering actions and sensors more efficient, but lowers the fidelity of movement. Negative Zones \u2693\ufe0e Set if this agent is affected by Negative Zones . The Belongs To , Collides With and Group Index properties configure the collision filter to use for this agent when detecting negative zones. Movement \u2693\ufe0e Ideal Speed \u2693\ufe0e The speed which this agent prefers to move at. Maximum Speed \u2693\ufe0e The maximum speed which this agent can move at. Minimum Speed \u2693\ufe0e The minimum speed which this agent can move at. Maximum Angular Speed \u2693\ufe0e The maximum speed (degrees/second) which this agent can turn at. Maximum Acceleration \u2693\ufe0e The maximum acceleration (units/second/second) which this agent can change it's speed with. Local Avoidance (Blocking) \u2693\ufe0e Block Other Agents \u2693\ufe0e Whether or not this agent is an obstacle to other agents. If set to false other agents will not try to avoid this agent. Local Avoidance (Avoiding) \u2693\ufe0e Avoid Local Obstacles \u2693\ufe0e Whether or not this agent should avoid obstacles (walls and other agents). Priority (Range) \u2693\ufe0e If two agents are walking directly towards each other priority determines how much each agent yields. A difference of 0 means they both avoid the collision at equal amount. A difference of 1 or more means that the higher priority agent does not yield at all. When the agent is created a random value within the range is chosen. Enable Priority Zones \u2693\ufe0e Allow priority zones to affect the priority of this agent. The Belongs To / Collides With / Group Id properties configure the collision filter to use for this agent when detecting priority zones. Personality Auto Configuration \u2693\ufe0e If this is enabled the \"personality\" (i.e. configuration for local avoidance) of this agent can automatically be configured from two parameters - carefulness and extraversion. When this is disabled all of the personality parameters can be set manually. Carefulness (Range) \u2693\ufe0e This property is only available if Personality Auto Configuration is disabled. An agent with a high carefulness will try harder to avoid collisions with other agents in the crowd. This can cause a more erratic movement. Extraversion (Range) \u2693\ufe0e This property is only available if Personality Auto Configuration is disabled. An agent with high extraversion will try harder to push through the crowd. This can cause more collisions. Personal Space Radius \u2693\ufe0e This property is only available if Personality Auto Configuration is disabled. The radius which local avoidance will attempt to keep clear of other agents. See Local Avoidance for more details. Time Horizon (Obstacles) \u2693\ufe0e This property is only available if Personality Auto Configuration is disabled. How far ahead in time (seconds) the agent will attempt to avoid collisions with static obstacles (e.g. walls). See Local Avoidance for more details. Time Horizon (Agents) \u2693\ufe0e This property is only available if Personality Auto Configuration is disabled. How far ahead in time (seconds) the agent will attempt to avoid collisions with other agents. See Local Avoidance for more details. Max Neighbour Search Radius \u2693\ufe0e This property is only available if Personality Auto Configuration is disabled. The size of the circle around this agent which will be searched for other agents to avoid. See Local Avoidance for more details. Max Neighbour Count \u2693\ufe0e This property is only available if Personality Auto Configuration is disabled. The maximum number of agents to avoid simultaneously. See Local Avoidance for more details. Debug Gizmos \u2693\ufe0e Personal Space (Gizmos) \u2693\ufe0e If checked, the agent will show it's \"personal space\" (the circle it tries to avoid letting other agents in to). Steering Vector \u2693\ufe0e If checked, the agent will show it's steering vector (the vector it is trying to steer along). Nearby Agents \u2693\ufe0e If checked, the agent will show all the nearby agents it is trying to avoid. Nearby Static Obstacles \u2693\ufe0e If checked, the agent will show all the nearby static obstacles (walls) it is trying to avoid. Script Properties \u2693\ufe0e GoalPosition \u2693\ufe0e Set the goal position for this agent. If pathfinding is enabled a path will be found to this position. GoalRadius \u2693\ufe0e Set the radius of the goal position. The agent will aim to arrive somewhere within the goal radius. GoalVelocity \u2693\ufe0e Set the velocity of the goal position. The agent will aim to match this velocity when it is within the radius. Script Methods \u2693\ufe0e bool Raycast(Vector3 targetPosition, out NavMeshHit hit) \u2693\ufe0e This method is equivalent to the Unity NavMesh.Raycast method. It traces a line between two points on the NavMesh, starting at the agent position and ending at the targetPosition . Returns true if the ray terminates before reaching the targetPosition , in this case the hit field contains data about where the ray ended. bool FindClosestEdge(out NavMeshHit hit) \u2693\ufe0e This method is equivalent to the Unity NavMesh.FindClosestEdge method. It finds the closest navmesh edge using the agent position and AreaMask . Returns true is an edge is found. PathfindingTask FindPath(Vector3 end) \u2693\ufe0e Begins finding a path from the agent position to the end position, using the agent AreaMask , AgentType and PathingAreaCost . The pathfinding runs asynchronously and may take several frames to complete. PathfindingTask FindPath(Vector3 start, Vector3 end, int areaMask, int agentType, NativeSlice ? areaCosts = default) \u2693\ufe0e Begins finding a path from the start point to the end point using a custom areaMask , agentType and areaCosts . areaCosts may be null in which case the default costs are used. The pathfinding runs asynchronously and may take several frames to complete.","title":"Navigator"},{"location":"Reference/MonoBehaviours/Navigator/#navigator","text":"This MonoBehaviour is the main behaviour which configures a gameObject as an intelligent Agent.","title":"Navigator"},{"location":"Reference/MonoBehaviours/Navigator/#inspector","text":"Note Some of the following properties set a range instead of a single value, when the agent is first initialised it will choose a random value in this range. This means that if you instantiate many prefabs of the same agent prefab they will all act slightly differently. This gives a more natural look to large groups of agents.","title":"Inspector"},{"location":"Reference/MonoBehaviours/Navigator/#radius","text":"The radius of the agent in the simulation. Other agents will never attempt to walk within this circle.","title":"Radius"},{"location":"Reference/MonoBehaviours/Navigator/#height","text":"The height of the agent in the simulation. The agent will avoid obstacles (e.g. walls and other agents) which are within it's height span.","title":"Height"},{"location":"Reference/MonoBehaviours/Navigator/#agent-type","text":"Agent type used for pathfinding. Available types are configured in the Unity navigation window: Window > AI > Navigation > Agents .","title":"Agent Type"},{"location":"Reference/MonoBehaviours/Navigator/#area-mask","text":"The area mask which defines the walkable areas for this agent.","title":"Area Mask"},{"location":"Reference/MonoBehaviours/Navigator/#pathing","text":"","title":"Pathing"},{"location":"Reference/MonoBehaviours/Navigator/#enable-pathfinding","text":"Allow this entity to find a path to it's goal (if it has a goal).","title":"Enable Pathfinding"},{"location":"Reference/MonoBehaviours/Navigator/#disable-automatic-repathing","text":"Disable automatically finding a new path when the path becomes stale (e.g. the goal moves).","title":"Disable Automatic Repathing"},{"location":"Reference/MonoBehaviours/Navigator/#repath-time","text":"How often (measured in seconds) the path will be automatically recalculated.","title":"Repath Time"},{"location":"Reference/MonoBehaviours/Navigator/#repath-off-path-time","text":"If the agent is not on it's calculated path for this many seconds the path will be automatically recalculated.","title":"Repath Off Path Time"},{"location":"Reference/MonoBehaviours/Navigator/#path-lookahead-distance","text":"How far ahead of the agent should path points be calculated.","title":"Path Lookahead Distance"},{"location":"Reference/MonoBehaviours/Navigator/#steering","text":"","title":"Steering"},{"location":"Reference/MonoBehaviours/Navigator/#negative-mode","text":"These options configure how the negative signal from steering sensors are interpreted when selecting a steering direction. See here for more detail on steering sensors. None - negative signals will be completely ignored. This will prevent all steering sensors from affecting this agent. Multiply - inverse negative signal will be multiple with steering direction weight, reducing the weight of steering signals by the negative weight. This produces smoother steering and is the best option to use when there are many negative signals affecting an agent. Mask Min - only steering directions in the minimum danger area are allowed, all other steering directions will not be chosen. This produces the most \"cautious\" steering but it is very likely that an agent using this mode will not be able to arrive at a specific destination if there is a danger sensed in that direction. Use this mode when an agent absolutely must not approach dangers and the actual direction it moves is not very important (e.g. wildlife). Mask Max - steering directions in the maximum danger area are not allowed, all other steering directions are unaffected by danger sensors. This produces the least \"cautious\" steering, but it is very likely that the agent will be able to move to it's destination unless the danger is at the same location. Use this mode when there is just one very important danger influencing an agent.","title":"Negative Mode"},{"location":"Reference/MonoBehaviours/Navigator/#negative-threshold","text":"Configures the threshold used for the negative mode. None - threshold does nothing. Multiply - threshold does nothing. Mask Min - all dangers signals within the threshold of the actual minimum are also treated as the minimum. Mask Max - all danger signals within the threshold of the actual maximum are also treated as the maximum.","title":"Negative Threshold"},{"location":"Reference/MonoBehaviours/Navigator/#positive-search-count","text":"Set how many directions will be tested to pick a final movement direction. Less directions makes all steering actions and sensors more efficient, but lowers the fidelity of movement.","title":"Positive Search Count"},{"location":"Reference/MonoBehaviours/Navigator/#negative-zones","text":"Set if this agent is affected by Negative Zones . The Belongs To , Collides With and Group Index properties configure the collision filter to use for this agent when detecting negative zones.","title":"Negative Zones"},{"location":"Reference/MonoBehaviours/Navigator/#movement","text":"","title":"Movement"},{"location":"Reference/MonoBehaviours/Navigator/#ideal-speed","text":"The speed which this agent prefers to move at.","title":"Ideal Speed"},{"location":"Reference/MonoBehaviours/Navigator/#maximum-speed","text":"The maximum speed which this agent can move at.","title":"Maximum Speed"},{"location":"Reference/MonoBehaviours/Navigator/#minimum-speed","text":"The minimum speed which this agent can move at.","title":"Minimum Speed"},{"location":"Reference/MonoBehaviours/Navigator/#maximum-angular-speed","text":"The maximum speed (degrees/second) which this agent can turn at.","title":"Maximum Angular Speed"},{"location":"Reference/MonoBehaviours/Navigator/#maximum-acceleration","text":"The maximum acceleration (units/second/second) which this agent can change it's speed with.","title":"Maximum Acceleration"},{"location":"Reference/MonoBehaviours/Navigator/#local-avoidance-blocking","text":"","title":"Local Avoidance (Blocking)"},{"location":"Reference/MonoBehaviours/Navigator/#block-other-agents","text":"Whether or not this agent is an obstacle to other agents. If set to false other agents will not try to avoid this agent.","title":"Block Other Agents"},{"location":"Reference/MonoBehaviours/Navigator/#local-avoidance-avoiding","text":"","title":"Local Avoidance (Avoiding)"},{"location":"Reference/MonoBehaviours/Navigator/#avoid-local-obstacles","text":"Whether or not this agent should avoid obstacles (walls and other agents).","title":"Avoid Local Obstacles"},{"location":"Reference/MonoBehaviours/Navigator/#priority-range","text":"If two agents are walking directly towards each other priority determines how much each agent yields. A difference of 0 means they both avoid the collision at equal amount. A difference of 1 or more means that the higher priority agent does not yield at all. When the agent is created a random value within the range is chosen.","title":"Priority (Range)"},{"location":"Reference/MonoBehaviours/Navigator/#enable-priority-zones","text":"Allow priority zones to affect the priority of this agent. The Belongs To / Collides With / Group Id properties configure the collision filter to use for this agent when detecting priority zones.","title":"Enable Priority Zones"},{"location":"Reference/MonoBehaviours/Navigator/#personality-auto-configuration","text":"If this is enabled the \"personality\" (i.e. configuration for local avoidance) of this agent can automatically be configured from two parameters - carefulness and extraversion. When this is disabled all of the personality parameters can be set manually.","title":"Personality Auto Configuration"},{"location":"Reference/MonoBehaviours/Navigator/#carefulness-range","text":"This property is only available if Personality Auto Configuration is disabled. An agent with a high carefulness will try harder to avoid collisions with other agents in the crowd. This can cause a more erratic movement.","title":"Carefulness (Range)"},{"location":"Reference/MonoBehaviours/Navigator/#extraversion-range","text":"This property is only available if Personality Auto Configuration is disabled. An agent with high extraversion will try harder to push through the crowd. This can cause more collisions.","title":"Extraversion (Range)"},{"location":"Reference/MonoBehaviours/Navigator/#personal-space-radius","text":"This property is only available if Personality Auto Configuration is disabled. The radius which local avoidance will attempt to keep clear of other agents. See Local Avoidance for more details.","title":"Personal Space Radius"},{"location":"Reference/MonoBehaviours/Navigator/#time-horizon-obstacles","text":"This property is only available if Personality Auto Configuration is disabled. How far ahead in time (seconds) the agent will attempt to avoid collisions with static obstacles (e.g. walls). See Local Avoidance for more details.","title":"Time Horizon (Obstacles)"},{"location":"Reference/MonoBehaviours/Navigator/#time-horizon-agents","text":"This property is only available if Personality Auto Configuration is disabled. How far ahead in time (seconds) the agent will attempt to avoid collisions with other agents. See Local Avoidance for more details.","title":"Time Horizon (Agents)"},{"location":"Reference/MonoBehaviours/Navigator/#max-neighbour-search-radius","text":"This property is only available if Personality Auto Configuration is disabled. The size of the circle around this agent which will be searched for other agents to avoid. See Local Avoidance for more details.","title":"Max Neighbour Search Radius"},{"location":"Reference/MonoBehaviours/Navigator/#max-neighbour-count","text":"This property is only available if Personality Auto Configuration is disabled. The maximum number of agents to avoid simultaneously. See Local Avoidance for more details.","title":"Max Neighbour Count"},{"location":"Reference/MonoBehaviours/Navigator/#debug-gizmos","text":"","title":"Debug Gizmos"},{"location":"Reference/MonoBehaviours/Navigator/#personal-space-gizmos","text":"If checked, the agent will show it's \"personal space\" (the circle it tries to avoid letting other agents in to).","title":"Personal Space (Gizmos)"},{"location":"Reference/MonoBehaviours/Navigator/#steering-vector","text":"If checked, the agent will show it's steering vector (the vector it is trying to steer along).","title":"Steering Vector"},{"location":"Reference/MonoBehaviours/Navigator/#nearby-agents","text":"If checked, the agent will show all the nearby agents it is trying to avoid.","title":"Nearby Agents"},{"location":"Reference/MonoBehaviours/Navigator/#nearby-static-obstacles","text":"If checked, the agent will show all the nearby static obstacles (walls) it is trying to avoid.","title":"Nearby Static Obstacles"},{"location":"Reference/MonoBehaviours/Navigator/#script-properties","text":"","title":"Script Properties"},{"location":"Reference/MonoBehaviours/Navigator/#goalposition","text":"Set the goal position for this agent. If pathfinding is enabled a path will be found to this position.","title":"GoalPosition"},{"location":"Reference/MonoBehaviours/Navigator/#goalradius","text":"Set the radius of the goal position. The agent will aim to arrive somewhere within the goal radius.","title":"GoalRadius"},{"location":"Reference/MonoBehaviours/Navigator/#goalvelocity","text":"Set the velocity of the goal position. The agent will aim to match this velocity when it is within the radius.","title":"GoalVelocity"},{"location":"Reference/MonoBehaviours/Navigator/#script-methods","text":"","title":"Script Methods"},{"location":"Reference/MonoBehaviours/Navigator/#bool-raycastvector3-targetposition-out-navmeshhit-hit","text":"This method is equivalent to the Unity NavMesh.Raycast method. It traces a line between two points on the NavMesh, starting at the agent position and ending at the targetPosition . Returns true if the ray terminates before reaching the targetPosition , in this case the hit field contains data about where the ray ended.","title":"bool Raycast(Vector3 targetPosition, out NavMeshHit hit)"},{"location":"Reference/MonoBehaviours/Navigator/#bool-findclosestedgeout-navmeshhit-hit","text":"This method is equivalent to the Unity NavMesh.FindClosestEdge method. It finds the closest navmesh edge using the agent position and AreaMask . Returns true is an edge is found.","title":"bool FindClosestEdge(out NavMeshHit hit)"},{"location":"Reference/MonoBehaviours/Navigator/#pathfindingtask-findpathvector3-end","text":"Begins finding a path from the agent position to the end position, using the agent AreaMask , AgentType and PathingAreaCost . The pathfinding runs asynchronously and may take several frames to complete.","title":"PathfindingTask FindPath(Vector3 end)"},{"location":"Reference/MonoBehaviours/Navigator/#pathfindingtask-findpathvector3-start-vector3-end-int-areamask-int-agenttype-nativeslice-areacosts-default","text":"Begins finding a path from the start point to the end point using a custom areaMask , agentType and areaCosts . areaCosts may be null in which case the default costs are used. The pathfinding runs asynchronously and may take several frames to complete.","title":"PathfindingTask FindPath(Vector3 start, Vector3 end, int areaMask, int agentType, NativeSlice? areaCosts = default)"},{"location":"Reference/MonoBehaviours/Synchroniser/","text":"Synchroniser \u2693\ufe0e This MonoBehaviour sychronises the Overcrowded simulation and the GameObjects in the scene. Inspector \u2693\ufe0e Preset \u2693\ufe0e These presets automatically configure the other settings for common scenarios: No Sync : Disables all other settings. No data will be copied between the Overcrowded simulation and the scene GameObjects. Initial Sync Only : Transfrom will be copied from the GameObject into the simulation once at the start. GameObject Is Master : Initial position is copied from GameObject. The simulation transform is overwritten with the GameObject transform every frame. Simulation Is Master : Initial position is copied from GameObject. The GameObject transform is overwritten with the Simulation transform every frame. Custom : Unlocks the other settings to allow a custom configuration. Startup \u2693\ufe0e These settings control which transform values (position and rotation) are copied between the GameObject and the simulation when the GameObject is first created. They are only enabled if the Preset is set to Custom . GameObject Transform \u21d2 Simulation \u2693\ufe0e The transform of the GameObject will be copied into the simulation. Simulation \u21d2 GameObject \u2693\ufe0e The simulation transform will be copied into the GameObject Base Offset (Y Axis) \u2693\ufe0e The vertical displacement between the simulation position (always attached to the navmesh) and the GameObject transform. Every Frame \u2693\ufe0e These settings control which transform values (position and rotation) are copied between the GameObject and the simulation every frame. They are only enabled if the Preset is set to Custom . GameObject Transform \u21d2 Simulation \u2693\ufe0e The GameObject transform will be copied into the simulation. When this is enabled the GameObject will not move and the simulation agent will stay wherever the GameObject is. Use this if you are moving the GameObject in response to the Overcrowded simulation with another script (e.g. see this guide ). Simulation \u21d2 Translation \u2693\ufe0e The Simulation Translation will be copied into the GameObject transform. The gameObject will move (but not rotate) in resposne to the simulation. Simulation \u21d2 Rotation (Forward) \u2693\ufe0e The forward (XZ) component of the simulation rotation will be copied into the GameObject transform. The GameObject turn (but not move) in response to the simulation. Simulation \u21d2 Rotation (Up Axis) \u2693\ufe0e The Up component of the simulation rotation (perpendicular to the NavMesh) will be copied into the GameObject transform. The GameObject will be aligned with the floor in response to the simulation.","title":"Synchroniser"},{"location":"Reference/MonoBehaviours/Synchroniser/#synchroniser","text":"This MonoBehaviour sychronises the Overcrowded simulation and the GameObjects in the scene.","title":"Synchroniser"},{"location":"Reference/MonoBehaviours/Synchroniser/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Synchroniser/#preset","text":"These presets automatically configure the other settings for common scenarios: No Sync : Disables all other settings. No data will be copied between the Overcrowded simulation and the scene GameObjects. Initial Sync Only : Transfrom will be copied from the GameObject into the simulation once at the start. GameObject Is Master : Initial position is copied from GameObject. The simulation transform is overwritten with the GameObject transform every frame. Simulation Is Master : Initial position is copied from GameObject. The GameObject transform is overwritten with the Simulation transform every frame. Custom : Unlocks the other settings to allow a custom configuration.","title":"Preset"},{"location":"Reference/MonoBehaviours/Synchroniser/#startup","text":"These settings control which transform values (position and rotation) are copied between the GameObject and the simulation when the GameObject is first created. They are only enabled if the Preset is set to Custom .","title":"Startup"},{"location":"Reference/MonoBehaviours/Synchroniser/#gameobject-transform-simulation","text":"The transform of the GameObject will be copied into the simulation.","title":"GameObject Transform \u21d2 Simulation"},{"location":"Reference/MonoBehaviours/Synchroniser/#simulation-gameobject","text":"The simulation transform will be copied into the GameObject","title":"Simulation \u21d2 GameObject"},{"location":"Reference/MonoBehaviours/Synchroniser/#base-offset-y-axis","text":"The vertical displacement between the simulation position (always attached to the navmesh) and the GameObject transform.","title":"Base Offset (Y Axis)"},{"location":"Reference/MonoBehaviours/Synchroniser/#every-frame","text":"These settings control which transform values (position and rotation) are copied between the GameObject and the simulation every frame. They are only enabled if the Preset is set to Custom .","title":"Every Frame"},{"location":"Reference/MonoBehaviours/Synchroniser/#gameobject-transform-simulation_1","text":"The GameObject transform will be copied into the simulation. When this is enabled the GameObject will not move and the simulation agent will stay wherever the GameObject is. Use this if you are moving the GameObject in response to the Overcrowded simulation with another script (e.g. see this guide ).","title":"GameObject Transform \u21d2 Simulation"},{"location":"Reference/MonoBehaviours/Synchroniser/#simulation-translation","text":"The Simulation Translation will be copied into the GameObject transform. The gameObject will move (but not rotate) in resposne to the simulation.","title":"Simulation \u21d2 Translation"},{"location":"Reference/MonoBehaviours/Synchroniser/#simulation-rotation-forward","text":"The forward (XZ) component of the simulation rotation will be copied into the GameObject transform. The GameObject turn (but not move) in response to the simulation.","title":"Simulation \u21d2 Rotation (Forward)"},{"location":"Reference/MonoBehaviours/Synchroniser/#simulation-rotation-up-axis","text":"The Up component of the simulation rotation (perpendicular to the NavMesh) will be copied into the GameObject transform. The GameObject will be aligned with the floor in response to the simulation.","title":"Simulation \u21d2 Rotation (Up Axis)"},{"location":"Reference/MonoBehaviours/Urgency/","text":"Urgency \u2693\ufe0e Urgency modifies how an agent acts within the Local Avoidance simulation to help it push through dense crowds more effectively. Urgency is a very short term modifier which helps the agent take the next few steps, it increases rapidly in response to failing to make progress through the crowd and resets back to zero very quickly as soon as the agent begins to push through successfully. For example it can prevent blockages in narrow doorways as the most urgent agent will push past less urgent agents coming the other way. As Urgency increases the Priority of the agent increases (meaning it will be less willing to yield to other agents) and the Personal Space of the agent decreases (meaning it will squeeze through smaller gaps). See Local Avoidance for more details on these parameters. When Urgency is very high a proxy obstacle is created next to the agent in the direction it wants to travel. Other agents avoid the proxy obstacle which clears space for the agent to move into, this guarantees that an agent eventually makes progress. Inspector \u2693\ufe0e Proxy Create Threshold \u2693\ufe0e Once Urgency exceeds this level a \"proxy obstacle\" will be created just in front of this agent. Other agents will avoid the proxy but this agent will completely ignore it. This causes the crowd to part slightly in front of the agent, pushing open a path through a blockage. Growth Factor \u2693\ufe0e Once the Urgency is over the Proxy Create Threshold the proxy obstacle will grow to it's maximum size (the size of the agent) over a period of time. This parameter determines how quickly it grows. Increase it to push more aggressively through a crowd. Velocity Urgency \u2693\ufe0e Enable Velocity Urgency \u2693\ufe0e If this option is enabled Urgency will increase when the velocity the agent wants to move at (as determined by Steering Behaviours ) is different to the velocity the agent is actually moving at (as determined by Local Avoidance ). Rate \u2693\ufe0e The rate at which the current agent Urgency will move towards the velocity urgency. A larger Rate means the urgency is more responsive, but may act more erratically. Factor \u2693\ufe0e How much a difference in velocity affects Urgency. A small factor means that a very large difference in velocity is required for a change in Urgency. Zone Urgency \u2693\ufe0e Enabled \u2693\ufe0e Allow this agent to be affected by Urgency Zones . The Belongs To , Collides With and Group Index properties configure the collision filter to use for this agent when detecting urgency zones. Debug Gizmos \u2693\ufe0e Aggression Proxy \u2693\ufe0e If enabled the proxy created by Urgency will be shown as a circle in front of the agent. Aggression Proxy Gizmo Color \u2693\ufe0e Sets the colour for the Aggression Proxy gizmo.","title":"Urgency"},{"location":"Reference/MonoBehaviours/Urgency/#urgency","text":"Urgency modifies how an agent acts within the Local Avoidance simulation to help it push through dense crowds more effectively. Urgency is a very short term modifier which helps the agent take the next few steps, it increases rapidly in response to failing to make progress through the crowd and resets back to zero very quickly as soon as the agent begins to push through successfully. For example it can prevent blockages in narrow doorways as the most urgent agent will push past less urgent agents coming the other way. As Urgency increases the Priority of the agent increases (meaning it will be less willing to yield to other agents) and the Personal Space of the agent decreases (meaning it will squeeze through smaller gaps). See Local Avoidance for more details on these parameters. When Urgency is very high a proxy obstacle is created next to the agent in the direction it wants to travel. Other agents avoid the proxy obstacle which clears space for the agent to move into, this guarantees that an agent eventually makes progress.","title":"Urgency"},{"location":"Reference/MonoBehaviours/Urgency/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Urgency/#proxy-create-threshold","text":"Once Urgency exceeds this level a \"proxy obstacle\" will be created just in front of this agent. Other agents will avoid the proxy but this agent will completely ignore it. This causes the crowd to part slightly in front of the agent, pushing open a path through a blockage.","title":"Proxy Create Threshold"},{"location":"Reference/MonoBehaviours/Urgency/#growth-factor","text":"Once the Urgency is over the Proxy Create Threshold the proxy obstacle will grow to it's maximum size (the size of the agent) over a period of time. This parameter determines how quickly it grows. Increase it to push more aggressively through a crowd.","title":"Growth Factor"},{"location":"Reference/MonoBehaviours/Urgency/#velocity-urgency","text":"","title":"Velocity Urgency"},{"location":"Reference/MonoBehaviours/Urgency/#enable-velocity-urgency","text":"If this option is enabled Urgency will increase when the velocity the agent wants to move at (as determined by Steering Behaviours ) is different to the velocity the agent is actually moving at (as determined by Local Avoidance ).","title":"Enable Velocity Urgency"},{"location":"Reference/MonoBehaviours/Urgency/#rate","text":"The rate at which the current agent Urgency will move towards the velocity urgency. A larger Rate means the urgency is more responsive, but may act more erratically.","title":"Rate"},{"location":"Reference/MonoBehaviours/Urgency/#factor","text":"How much a difference in velocity affects Urgency. A small factor means that a very large difference in velocity is required for a change in Urgency.","title":"Factor"},{"location":"Reference/MonoBehaviours/Urgency/#zone-urgency","text":"","title":"Zone Urgency"},{"location":"Reference/MonoBehaviours/Urgency/#enabled","text":"Allow this agent to be affected by Urgency Zones . The Belongs To , Collides With and Group Index properties configure the collision filter to use for this agent when detecting urgency zones.","title":"Enabled"},{"location":"Reference/MonoBehaviours/Urgency/#debug-gizmos","text":"","title":"Debug Gizmos"},{"location":"Reference/MonoBehaviours/Urgency/#aggression-proxy","text":"If enabled the proxy created by Urgency will be shown as a circle in front of the agent.","title":"Aggression Proxy"},{"location":"Reference/MonoBehaviours/Urgency/#aggression-proxy-gizmo-color","text":"Sets the colour for the Aggression Proxy gizmo.","title":"Aggression Proxy Gizmo Color"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/","text":"CircleSensor \u2693\ufe0e This MonoBehaviour detects a circular area as a danger and discourages steering towards it. Inspector \u2693\ufe0e Name \u2693\ufe0e The unique ID of this sensor. Used to identify this instance in scripts. Point \u2693\ufe0e The XZ position of the center of the circle. Radius \u2693\ufe0e The radius of the circle. Invert \u2693\ufe0e If checked, all directions away from the circle will be detected as a danger. If unchecked the directions towards the circle will be detected as a danger. Negative Weight \u2693\ufe0e The importance of this negative sensor relative to other sensors. Negative Min Distance \u2693\ufe0e If the circle is closer than this distance, the full Negative Weight will be used. Negative Max Distance \u2693\ufe0e If the circle is farther than this distance, the sensor will be not detect it. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new sensor with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing sensor with the given name. Returns null if there is no sensor with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the sensor with the given name. Returns true if a sensor with that name existed and was deleted.","title":"CircleSensor"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/#circlesensor","text":"This MonoBehaviour detects a circular area as a danger and discourages steering towards it.","title":"CircleSensor"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/#name","text":"The unique ID of this sensor. Used to identify this instance in scripts.","title":"Name"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/#point","text":"The XZ position of the center of the circle.","title":"Point"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/#radius","text":"The radius of the circle.","title":"Radius"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/#invert","text":"If checked, all directions away from the circle will be detected as a danger. If unchecked the directions towards the circle will be detected as a danger.","title":"Invert"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/#negative-weight","text":"The importance of this negative sensor relative to other sensors.","title":"Negative Weight"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/#negative-min-distance","text":"If the circle is closer than this distance, the full Negative Weight will be used.","title":"Negative Min Distance"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/#negative-max-distance","text":"If the circle is farther than this distance, the sensor will be not detect it.","title":"Negative Max Distance"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/#createstring-instancename","text":"Create a new sensor with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/#trygetstring-instancename","text":"Try to get an existing sensor with the given name. Returns null if there is no sensor with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Sensing/CircleSensor/#bool-trydeletestring-instancename","text":"Try to delete the sensor with the given name. Returns true if a sensor with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Sensing/GameObjectSensor/","text":"GameObjectSensor \u2693\ufe0e This MonoBehaviour detects another GameObject as a danger and discourages steering towards it. This is similar to a PointSensor where the point is always at the location of a particular GameObject. Inspector \u2693\ufe0e Name \u2693\ufe0e The unique ID of this sensor. Used to identify this instance in scripts. Menace \u2693\ufe0e The GameObject which will be detected as a danger. Invert \u2693\ufe0e If checked, all directions away from the GameObject will be detected as a danger. If unchecked the direction towards the GameObject will be detected as a danger. Negative Weight \u2693\ufe0e The importance of this negative sensor relative to other sensors. Negative Min Distance \u2693\ufe0e If the GameObject is closer than this distance, the full Negative Weight will be used. Negative Max Distance \u2693\ufe0e If the GameObject is farther than this distance, the sensor will be not detect it. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new sensor with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing sensor with the given name. Returns null if there is no sensor with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the sensor with the given name. Returns true if a sensor with that name existed and was deleted.","title":"GameObjectSensor"},{"location":"Reference/MonoBehaviours/Sensing/GameObjectSensor/#gameobjectsensor","text":"This MonoBehaviour detects another GameObject as a danger and discourages steering towards it. This is similar to a PointSensor where the point is always at the location of a particular GameObject.","title":"GameObjectSensor"},{"location":"Reference/MonoBehaviours/Sensing/GameObjectSensor/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Sensing/GameObjectSensor/#name","text":"The unique ID of this sensor. Used to identify this instance in scripts.","title":"Name"},{"location":"Reference/MonoBehaviours/Sensing/GameObjectSensor/#menace","text":"The GameObject which will be detected as a danger.","title":"Menace"},{"location":"Reference/MonoBehaviours/Sensing/GameObjectSensor/#invert","text":"If checked, all directions away from the GameObject will be detected as a danger. If unchecked the direction towards the GameObject will be detected as a danger.","title":"Invert"},{"location":"Reference/MonoBehaviours/Sensing/GameObjectSensor/#negative-weight","text":"The importance of this negative sensor relative to other sensors.","title":"Negative Weight"},{"location":"Reference/MonoBehaviours/Sensing/GameObjectSensor/#negative-min-distance","text":"If the GameObject is closer than this distance, the full Negative Weight will be used.","title":"Negative Min Distance"},{"location":"Reference/MonoBehaviours/Sensing/GameObjectSensor/#negative-max-distance","text":"If the GameObject is farther than this distance, the sensor will be not detect it.","title":"Negative Max Distance"},{"location":"Reference/MonoBehaviours/Sensing/GameObjectSensor/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Sensing/GameObjectSensor/#createstring-instancename","text":"Create a new sensor with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Sensing/GameObjectSensor/#trygetstring-instancename","text":"Try to get an existing sensor with the given name. Returns null if there is no sensor with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Sensing/GameObjectSensor/#bool-trydeletestring-instancename","text":"Try to delete the sensor with the given name. Returns true if a sensor with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/","text":"LineSensor \u2693\ufe0e This MonoBehaviour detects a line as a danger and discourages steering towards it. Inspector \u2693\ufe0e Name \u2693\ufe0e The unique ID of this sensor. Used to identify this instance in scripts. Start \u2693\ufe0e The XZ position of the start of the line. End \u2693\ufe0e The XZ position of the end of the line. Invert \u2693\ufe0e If checked, all directions away from the line will be detected as a danger. If unchecked the directions towards the line will be detected as a danger. Notch \u2693\ufe0e If checked the sensor will not detect danger directly towards the line when the agent is within the min negative distance. This gives the appearance of the agent making a decision to quickly dash across the danger at the last second. Not compatible with inverted sensors. Negative Weight \u2693\ufe0e The importance of this negative sensor relative to other sensors. Negative Min Distance \u2693\ufe0e If the line is closer than this distance, the full Negative Weight will be used. Negative Max Distance \u2693\ufe0e If the line is farther than this distance, the sensor will be not detect it. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new sensor with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing sensor with the given name. Returns null if there is no sensor with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the sensor with the given name. Returns true if a sensor with that name existed and was deleted.","title":"LineSensor"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#linesensor","text":"This MonoBehaviour detects a line as a danger and discourages steering towards it.","title":"LineSensor"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#name","text":"The unique ID of this sensor. Used to identify this instance in scripts.","title":"Name"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#start","text":"The XZ position of the start of the line.","title":"Start"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#end","text":"The XZ position of the end of the line.","title":"End"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#invert","text":"If checked, all directions away from the line will be detected as a danger. If unchecked the directions towards the line will be detected as a danger.","title":"Invert"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#notch","text":"If checked the sensor will not detect danger directly towards the line when the agent is within the min negative distance. This gives the appearance of the agent making a decision to quickly dash across the danger at the last second. Not compatible with inverted sensors.","title":"Notch"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#negative-weight","text":"The importance of this negative sensor relative to other sensors.","title":"Negative Weight"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#negative-min-distance","text":"If the line is closer than this distance, the full Negative Weight will be used.","title":"Negative Min Distance"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#negative-max-distance","text":"If the line is farther than this distance, the sensor will be not detect it.","title":"Negative Max Distance"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#createstring-instancename","text":"Create a new sensor with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#trygetstring-instancename","text":"Try to get an existing sensor with the given name. Returns null if there is no sensor with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Sensing/LineSensor/#bool-trydeletestring-instancename","text":"Try to delete the sensor with the given name. Returns true if a sensor with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/","text":"PointSensor \u2693\ufe0e This MonoBehaviour detects a single point as a danger and discourages steering towards it. Inspector \u2693\ufe0e Name \u2693\ufe0e The unique ID of this sensor. Used to identify this instance in scripts. Point \u2693\ufe0e The XZ position of the point. Invert \u2693\ufe0e If checked, all directions away from the point will be detected as a danger. If unchecked the direction towards the point will be detected as a danger. Negative Weight \u2693\ufe0e The importance of this negative sensor relative to other sensors. Negative Min Distance \u2693\ufe0e If the point is closer than this distance, the full Negative Weight will be used. Negative Max Distance \u2693\ufe0e If the point is farther than this distance, the sensor will be not detect it. Delete/Add New \u2693\ufe0e Create a new instance of this sensor or delete an existing instance. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new sensor with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing sensor with the given name. Returns null if there is no sensor with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the sensor with the given name. Returns true if a sensor with that name existed and was deleted.","title":"PointSensor"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/#pointsensor","text":"This MonoBehaviour detects a single point as a danger and discourages steering towards it.","title":"PointSensor"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/#name","text":"The unique ID of this sensor. Used to identify this instance in scripts.","title":"Name"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/#point","text":"The XZ position of the point.","title":"Point"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/#invert","text":"If checked, all directions away from the point will be detected as a danger. If unchecked the direction towards the point will be detected as a danger.","title":"Invert"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/#negative-weight","text":"The importance of this negative sensor relative to other sensors.","title":"Negative Weight"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/#negative-min-distance","text":"If the point is closer than this distance, the full Negative Weight will be used.","title":"Negative Min Distance"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/#negative-max-distance","text":"If the point is farther than this distance, the sensor will be not detect it.","title":"Negative Max Distance"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/#deleteadd-new","text":"Create a new instance of this sensor or delete an existing instance.","title":"Delete/Add New"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/#createstring-instancename","text":"Create a new sensor with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/#trygetstring-instancename","text":"Try to get an existing sensor with the given name. Returns null if there is no sensor with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Sensing/PointSensor/#bool-trydeletestring-instancename","text":"Try to delete the sensor with the given name. Returns true if a sensor with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForAlignment/","text":"SteerForAlignment \u2693\ufe0e This MonoBehaviour causes an agent to steer in the average direction of all nearby agents. Inspector \u2693\ufe0e Name \u2693\ufe0e The unique ID of this steering action. Used to identify this instance in scripts. Weight \u2693\ufe0e The importance of this action relative to other steering actions. Max Distance \u2693\ufe0e Only agents within this distance will contribute to the average direction. Angle \u2693\ufe0e Only agents in front of the agent (within this angle) will contribute to the average direction. Delete/Add New \u2693\ufe0e Create a new instance of this steering action or delete an existing instance. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new steering action with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing steering action with the given name. Returns null if there is no action with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"SteerForAlignment"},{"location":"Reference/MonoBehaviours/Steering/SteerForAlignment/#steerforalignment","text":"This MonoBehaviour causes an agent to steer in the average direction of all nearby agents.","title":"SteerForAlignment"},{"location":"Reference/MonoBehaviours/Steering/SteerForAlignment/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Steering/SteerForAlignment/#name","text":"The unique ID of this steering action. Used to identify this instance in scripts.","title":"Name"},{"location":"Reference/MonoBehaviours/Steering/SteerForAlignment/#weight","text":"The importance of this action relative to other steering actions.","title":"Weight"},{"location":"Reference/MonoBehaviours/Steering/SteerForAlignment/#max-distance","text":"Only agents within this distance will contribute to the average direction.","title":"Max Distance"},{"location":"Reference/MonoBehaviours/Steering/SteerForAlignment/#angle","text":"Only agents in front of the agent (within this angle) will contribute to the average direction.","title":"Angle"},{"location":"Reference/MonoBehaviours/Steering/SteerForAlignment/#deleteadd-new","text":"Create a new instance of this steering action or delete an existing instance.","title":"Delete/Add New"},{"location":"Reference/MonoBehaviours/Steering/SteerForAlignment/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Steering/SteerForAlignment/#createstring-instancename","text":"Create a new steering action with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForAlignment/#trygetstring-instancename","text":"Try to get an existing steering action with the given name. Returns null if there is no action with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForAlignment/#bool-trydeletestring-instancename","text":"Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/","text":"SteerForArrival \u2693\ufe0e This MonoBehaviour causes an agent to steer directly towards a target point and slow to a stop as it arrives. Inspector \u2693\ufe0e Name \u2693\ufe0e The unique ID of this steering action. Used to identify this instance in scripts. Target \u2693\ufe0e The target position (in 2D space) that the agent is walking towards. For example if you have a transform to walk towards you would set this to the XZ position of the transform . Slowing Distance \u2693\ufe0e The Agent will begin slowing to a stop when it is this far from the destination. Weight \u2693\ufe0e The importance of this action relative to other steering actions. Speed Type \u2693\ufe0e The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ). Speed \u2693\ufe0e The speed to move towards the target at. The units of this value depend on the Speed Type property. Delete/Add New \u2693\ufe0e Create a new instance of this steering action or delete an existing instance. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new steering action with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing steering action with the given name. Returns null if there is no action with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"SteerForArrival"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/#steerforarrival","text":"This MonoBehaviour causes an agent to steer directly towards a target point and slow to a stop as it arrives.","title":"SteerForArrival"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/#name","text":"The unique ID of this steering action. Used to identify this instance in scripts.","title":"Name"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/#target","text":"The target position (in 2D space) that the agent is walking towards. For example if you have a transform to walk towards you would set this to the XZ position of the transform .","title":"Target"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/#slowing-distance","text":"The Agent will begin slowing to a stop when it is this far from the destination.","title":"Slowing Distance"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/#weight","text":"The importance of this action relative to other steering actions.","title":"Weight"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/#speed-type","text":"The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ).","title":"Speed Type"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/#speed","text":"The speed to move towards the target at. The units of this value depend on the Speed Type property.","title":"Speed"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/#deleteadd-new","text":"Create a new instance of this steering action or delete an existing instance.","title":"Delete/Add New"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/#createstring-instancename","text":"Create a new steering action with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/#trygetstring-instancename","text":"Try to get an existing steering action with the given name. Returns null if there is no action with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForArrival/#bool-trydeletestring-instancename","text":"Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/","text":"SteerForCohesion \u2693\ufe0e This MonoBehaviour causes an agent to pursue the average location of all nearby agents. SteerForCohesion requires Avoid Local Obstacles to be enabled. Inspector \u2693\ufe0e Name \u2693\ufe0e The target position (in 2D space) that the agent is walking towards. For example if you have a transform to walk towards you would set this to the XZ position of the transform . Weight \u2693\ufe0e The importance of this action relative to other steering actions. Speed Type \u2693\ufe0e The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ). Speed \u2693\ufe0e The speed to move away from the target at. The units of this value depend on the Speed Type property. Max Prediction Time \u2693\ufe0e The amount of time (in seconds) to predict the movement of nearby agents before steering for cohesion. Arrival Distance \u2693\ufe0e The distance from the average point to begin slowing to a stop. Max Distance \u2693\ufe0e The maximum distance of an agent to include in cohesion steering. Agents further away than this will be ignored. Delete/Add New \u2693\ufe0e Create a new instance of this steering action or delete an existing instance. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new steering action with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing steering action with the given name. Returns null if there is no action with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"SteerForCohesion"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#steerforcohesion","text":"This MonoBehaviour causes an agent to pursue the average location of all nearby agents. SteerForCohesion requires Avoid Local Obstacles to be enabled.","title":"SteerForCohesion"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#name","text":"The target position (in 2D space) that the agent is walking towards. For example if you have a transform to walk towards you would set this to the XZ position of the transform .","title":"Name"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#weight","text":"The importance of this action relative to other steering actions.","title":"Weight"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#speed-type","text":"The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ).","title":"Speed Type"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#speed","text":"The speed to move away from the target at. The units of this value depend on the Speed Type property.","title":"Speed"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#max-prediction-time","text":"The amount of time (in seconds) to predict the movement of nearby agents before steering for cohesion.","title":"Max Prediction Time"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#arrival-distance","text":"The distance from the average point to begin slowing to a stop.","title":"Arrival Distance"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#max-distance","text":"The maximum distance of an agent to include in cohesion steering. Agents further away than this will be ignored.","title":"Max Distance"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#deleteadd-new","text":"Create a new instance of this steering action or delete an existing instance.","title":"Delete/Add New"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#createstring-instancename","text":"Create a new steering action with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#trygetstring-instancename","text":"Try to get an existing steering action with the given name. Returns null if there is no action with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForCohesion/#bool-trydeletestring-instancename","text":"Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/","text":"SteerForEvade \u2693\ufe0e This MonoBehaviour causes an agent to steer away from the predicted future position of another agent. If the supplied transform is not an agent this is exactly equivalent to SteerForFlee . Also acts as a danger sensor discouraging steering directly towards the other agent. Inspector \u2693\ufe0e Name \u2693\ufe0e The unique ID of this steering action. Used to identify this instance in scripts. Menace \u2693\ufe0e The transform which this Agent is evading. Max Prediction Time \u2693\ufe0e If the Menace transform is another Agent it's position will be predicted this many seconds into the future and then this this agent will flee from that predicted position. This produces more responsive evasion than simply fleeing the agent directly. Weight \u2693\ufe0e The importance of this action relative to other steering actions. Speed Type \u2693\ufe0e The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ). Speed \u2693\ufe0e The speed to move away from the target at. The units of this value depend on the Speed Type property. Negative Weight \u2693\ufe0e The importance of this negative sensor relative to other sensors. Set to zero to disable the sensor aspect of this steering action. Negative Min Distance \u2693\ufe0e If the Menace is closer than this distance, the full Negative Weight will be used. Negative Max Distance \u2693\ufe0e If the Menace is farther than this distance, the sensor will be not detect it. Delete/Add New \u2693\ufe0e Create a new instance of this steering action or delete an existing instance. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new steering action with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing steering action with the given name. Returns null if there is no action with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"SteerForEvade"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#steerforevade","text":"This MonoBehaviour causes an agent to steer away from the predicted future position of another agent. If the supplied transform is not an agent this is exactly equivalent to SteerForFlee . Also acts as a danger sensor discouraging steering directly towards the other agent.","title":"SteerForEvade"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#name","text":"The unique ID of this steering action. Used to identify this instance in scripts.","title":"Name"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#menace","text":"The transform which this Agent is evading.","title":"Menace"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#max-prediction-time","text":"If the Menace transform is another Agent it's position will be predicted this many seconds into the future and then this this agent will flee from that predicted position. This produces more responsive evasion than simply fleeing the agent directly.","title":"Max Prediction Time"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#weight","text":"The importance of this action relative to other steering actions.","title":"Weight"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#speed-type","text":"The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ).","title":"Speed Type"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#speed","text":"The speed to move away from the target at. The units of this value depend on the Speed Type property.","title":"Speed"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#negative-weight","text":"The importance of this negative sensor relative to other sensors. Set to zero to disable the sensor aspect of this steering action.","title":"Negative Weight"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#negative-min-distance","text":"If the Menace is closer than this distance, the full Negative Weight will be used.","title":"Negative Min Distance"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#negative-max-distance","text":"If the Menace is farther than this distance, the sensor will be not detect it.","title":"Negative Max Distance"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#deleteadd-new","text":"Create a new instance of this steering action or delete an existing instance.","title":"Delete/Add New"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#createstring-instancename","text":"Create a new steering action with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#trygetstring-instancename","text":"Try to get an existing steering action with the given name. Returns null if there is no action with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForEvade/#bool-trydeletestring-instancename","text":"Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/","text":"SteerForFlee \u2693\ufe0e This MonoBehaviour causes an agent to steer directly away from a target point. Also acts as a danger sensor discouraging steering directly towards the target point. Inspector \u2693\ufe0e Name \u2693\ufe0e The unique ID of this steering action. Used to identify this instance in scripts. Target \u2693\ufe0e The position which this Agent is fleeing from. Weight \u2693\ufe0e The importance of this action relative to other steering actions. Speed Type \u2693\ufe0e The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ). Speed \u2693\ufe0e The speed to move away from the target at. The units of this value depend on the Speed Type property. Negative Weight \u2693\ufe0e The importance of this negative sensor relative to other sensors. Set to zero to disable the sensor aspect of this steering action. Negative Min Distance \u2693\ufe0e If the Target is closer than this distance, the full Negative Weight will be used. Negative Max Distance \u2693\ufe0e If the Target is farther than this distance, the sensor will be not detect it. Delete/Add New \u2693\ufe0e Create a new instance of this steering action or delete an existing instance. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new steering action with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing steering action with the given name. Returns null if there is no action with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"SteerForFlee"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#steerforflee","text":"This MonoBehaviour causes an agent to steer directly away from a target point. Also acts as a danger sensor discouraging steering directly towards the target point.","title":"SteerForFlee"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#name","text":"The unique ID of this steering action. Used to identify this instance in scripts.","title":"Name"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#target","text":"The position which this Agent is fleeing from.","title":"Target"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#weight","text":"The importance of this action relative to other steering actions.","title":"Weight"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#speed-type","text":"The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ).","title":"Speed Type"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#speed","text":"The speed to move away from the target at. The units of this value depend on the Speed Type property.","title":"Speed"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#negative-weight","text":"The importance of this negative sensor relative to other sensors. Set to zero to disable the sensor aspect of this steering action.","title":"Negative Weight"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#negative-min-distance","text":"If the Target is closer than this distance, the full Negative Weight will be used.","title":"Negative Min Distance"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#negative-max-distance","text":"If the Target is farther than this distance, the sensor will be not detect it.","title":"Negative Max Distance"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#deleteadd-new","text":"Create a new instance of this steering action or delete an existing instance.","title":"Delete/Add New"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#createstring-instancename","text":"Create a new steering action with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#trygetstring-instancename","text":"Try to get an existing steering action with the given name. Returns null if there is no action with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForFlee/#bool-trydeletestring-instancename","text":"Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/","text":"SteerForGoal \u2693\ufe0e This MonoBehaviour causes an agent to steer along a pathfinding path to a goal point. It requires Navigator > Enable Pathing enabled to generate a path. The goal point can be set to have a velocity as well as a position, in this case the agent will attempt to match it's velocity with the goal velocity as it reaches the goal position. Inspector \u2693\ufe0e Weight \u2693\ufe0e The importance of this action relative to other steering actions. Slowing Distance \u2693\ufe0e The Agent will begin matching the goal velocity when it is this far away from the goal position. Waypoint Skip Distance \u2693\ufe0e The agent will ignore waypoints on the path which are closer than this distance. This causes agents to slightly cut the corner of paths, creating a more natural motion. Speed Type \u2693\ufe0e The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ). Speed \u2693\ufe0e The speed to move away from the target at. The units of this value depend on the Speed Type property. Off Mesh Links \u2693\ufe0e Autocomplete Off Mesh Links \u2693\ufe0e Set if this agent should automatically complete off-mesh links by teleporting to the end of the link as soon as IsWaitingAtOffMeshLink becomes true . When the game is running the inspector will show details of the next off-mesh link. When the agent is waiting at an off-mesh link the Complete Off Mesh Link button will appear, clicking this is equivalent to calling the CompleteOffMeshLink method. Debug Gizmos \u2693\ufe0e Waypoints \u2693\ufe0e Enable displaying the waypoints (exact points this agent intends to walk to) for this agent and set the colour. Waypoints are not calculated all the way to the end of the path for long paths. Portals \u2693\ufe0e Enable displaying the portals (gateways which this agent intends to pass through) for this agent and set the colour. Portals represent the entire path from agent to goal. Scripting \u2693\ufe0e bool IsApproachingOffMeshLink \u2693\ufe0e Indicates if the Agent is on \"final approach\" to an off-mesh link. This means there are no more corners in the path between the current position of the agent and the start of the off-mesh link. PolygonId? OffMeshLinkPolygon \u2693\ufe0e Gets the PolygonId of the off-mesh link which the agent is approaching. Returns null is IsApproachingOffMeshLink is false . bool IsWaitingAtOffMeshLink \u2693\ufe0e Indicates if the agent is standing still at the start of an off-mesh link, waiting to complete the link. When the agent is in this state you may move it in the scene (e.g. play an animation to cross the link). float? DistanceToOffMeshLink \u2693\ufe0e Indicates the distance to the start of the next off-mesh link. Returns null is IsApproachingOffMeshLink is false . PathfindingResultWaypoint? NextWaypoint \u2693\ufe0e Returns the next corner in the path which the agent is following. Returns null if there is no current path. CompleteOffMeshLink(bool teleport, bool checkOffPath) \u2693\ufe0e Mark the off-mesh link as completed. teleport indicates if the agent should instantly teleport to the end of the off-mesh link or if a new path should be found and followed. checkOffPath indicates if the teleport/repathing behaviour should only be done if the agent is off path, otherwise the agent will simply continue following the path it was already on.","title":"SteerForGoal"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#steerforgoal","text":"This MonoBehaviour causes an agent to steer along a pathfinding path to a goal point. It requires Navigator > Enable Pathing enabled to generate a path. The goal point can be set to have a velocity as well as a position, in this case the agent will attempt to match it's velocity with the goal velocity as it reaches the goal position.","title":"SteerForGoal"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#weight","text":"The importance of this action relative to other steering actions.","title":"Weight"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#slowing-distance","text":"The Agent will begin matching the goal velocity when it is this far away from the goal position.","title":"Slowing Distance"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#waypoint-skip-distance","text":"The agent will ignore waypoints on the path which are closer than this distance. This causes agents to slightly cut the corner of paths, creating a more natural motion.","title":"Waypoint Skip Distance"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#speed-type","text":"The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ).","title":"Speed Type"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#speed","text":"The speed to move away from the target at. The units of this value depend on the Speed Type property.","title":"Speed"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#off-mesh-links","text":"","title":"Off Mesh Links"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#autocomplete-off-mesh-links","text":"Set if this agent should automatically complete off-mesh links by teleporting to the end of the link as soon as IsWaitingAtOffMeshLink becomes true . When the game is running the inspector will show details of the next off-mesh link. When the agent is waiting at an off-mesh link the Complete Off Mesh Link button will appear, clicking this is equivalent to calling the CompleteOffMeshLink method.","title":"Autocomplete Off Mesh Links"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#debug-gizmos","text":"","title":"Debug Gizmos"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#waypoints","text":"Enable displaying the waypoints (exact points this agent intends to walk to) for this agent and set the colour. Waypoints are not calculated all the way to the end of the path for long paths.","title":"Waypoints"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#portals","text":"Enable displaying the portals (gateways which this agent intends to pass through) for this agent and set the colour. Portals represent the entire path from agent to goal.","title":"Portals"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#bool-isapproachingoffmeshlink","text":"Indicates if the Agent is on \"final approach\" to an off-mesh link. This means there are no more corners in the path between the current position of the agent and the start of the off-mesh link.","title":"bool IsApproachingOffMeshLink"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#polygonid-offmeshlinkpolygon","text":"Gets the PolygonId of the off-mesh link which the agent is approaching. Returns null is IsApproachingOffMeshLink is false .","title":"PolygonId? OffMeshLinkPolygon"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#bool-iswaitingatoffmeshlink","text":"Indicates if the agent is standing still at the start of an off-mesh link, waiting to complete the link. When the agent is in this state you may move it in the scene (e.g. play an animation to cross the link).","title":"bool IsWaitingAtOffMeshLink"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#float-distancetooffmeshlink","text":"Indicates the distance to the start of the next off-mesh link. Returns null is IsApproachingOffMeshLink is false .","title":"float? DistanceToOffMeshLink"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#pathfindingresultwaypoint-nextwaypoint","text":"Returns the next corner in the path which the agent is following. Returns null if there is no current path.","title":"PathfindingResultWaypoint? NextWaypoint"},{"location":"Reference/MonoBehaviours/Steering/SteerForGoal/#completeoffmeshlinkbool-teleport-bool-checkoffpath","text":"Mark the off-mesh link as completed. teleport indicates if the agent should instantly teleport to the end of the off-mesh link or if a new path should be found and followed. checkOffPath indicates if the teleport/repathing behaviour should only be done if the agent is off path, otherwise the agent will simply continue following the path it was already on.","title":"CompleteOffMeshLink(bool teleport, bool checkOffPath)"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/","text":"SteerForInterpose \u2693\ufe0e This MonoBehaviour causes an agent to pursue a point between two other agents, ensuring it stays between them. Inspector \u2693\ufe0e Name \u2693\ufe0e The unique ID of this steering action. Used to identify this instance in scripts. Entity0/Entity1 \u2693\ufe0e Set the two transform s that this agent should stay between. Weight \u2693\ufe0e The importance of this action relative to other steering actions. Speed Type \u2693\ufe0e The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ). Speed \u2693\ufe0e The speed to move away from the target at. The units of this value depend on the Speed Type property. Max Prediction Time \u2693\ufe0e The amount of time (in seconds) to predict the movement of the two end points. Arrival Distance \u2693\ufe0e The distance from the center point to begin slowing to a stop. Balance \u2693\ufe0e How close the agent should be to each end. A value of 0 means it will be standing at the same position as Entity0 . A value of 1 means it will be standing at the same position as Entity1 . A value of 0.5 will be halfway between the two. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new steering action with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing steering action with the given name. Returns null if there is no action with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"SteerForInterpose"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#steerforinterpose","text":"This MonoBehaviour causes an agent to pursue a point between two other agents, ensuring it stays between them.","title":"SteerForInterpose"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#name","text":"The unique ID of this steering action. Used to identify this instance in scripts.","title":"Name"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#entity0entity1","text":"Set the two transform s that this agent should stay between.","title":"Entity0/Entity1"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#weight","text":"The importance of this action relative to other steering actions.","title":"Weight"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#speed-type","text":"The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ).","title":"Speed Type"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#speed","text":"The speed to move away from the target at. The units of this value depend on the Speed Type property.","title":"Speed"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#max-prediction-time","text":"The amount of time (in seconds) to predict the movement of the two end points.","title":"Max Prediction Time"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#arrival-distance","text":"The distance from the center point to begin slowing to a stop.","title":"Arrival Distance"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#balance","text":"How close the agent should be to each end. A value of 0 means it will be standing at the same position as Entity0 . A value of 1 means it will be standing at the same position as Entity1 . A value of 0.5 will be halfway between the two.","title":"Balance"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#createstring-instancename","text":"Create a new steering action with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#trygetstring-instancename","text":"Try to get an existing steering action with the given name. Returns null if there is no action with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForInterpose/#bool-trydeletestring-instancename","text":"Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/","text":"SteerForPursue \u2693\ufe0e This MonoBehaviour causes an agent to steer towards the predicted future position of another agent. If the supplied transform is not an agent this is exactly equivalent to SteerForArrival . Inspector \u2693\ufe0e Name \u2693\ufe0e The unique ID of this steering action. Used to identify this instance in scripts. Quarry \u2693\ufe0e The transform which this Agent is pursuing. Max Prediction Time \u2693\ufe0e If the Quarry transform is another Agent it's position will be predicted this many seconds into the future and then this this agent will steer to arrive at that predicted position. This produces more responsive pursuit than simply arriving at the quarry position directly. Weight \u2693\ufe0e The importance of this action relative to other steering actions. Arrival Distance \u2693\ufe0e The Agent will begin slowing to a stop when it is this far from the quarry. Speed Type \u2693\ufe0e The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ). Speed \u2693\ufe0e The speed to move away from the target at. The units of this value depend on the Speed Type property. Delete/Add New \u2693\ufe0e Create a new instance of this steering action or delete an existing instance. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new steering action with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing steering action with the given name. Returns null if there is no action with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"SteerForPursue"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#steerforpursue","text":"This MonoBehaviour causes an agent to steer towards the predicted future position of another agent. If the supplied transform is not an agent this is exactly equivalent to SteerForArrival .","title":"SteerForPursue"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#name","text":"The unique ID of this steering action. Used to identify this instance in scripts.","title":"Name"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#quarry","text":"The transform which this Agent is pursuing.","title":"Quarry"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#max-prediction-time","text":"If the Quarry transform is another Agent it's position will be predicted this many seconds into the future and then this this agent will steer to arrive at that predicted position. This produces more responsive pursuit than simply arriving at the quarry position directly.","title":"Max Prediction Time"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#weight","text":"The importance of this action relative to other steering actions.","title":"Weight"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#arrival-distance","text":"The Agent will begin slowing to a stop when it is this far from the quarry.","title":"Arrival Distance"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#speed-type","text":"The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ).","title":"Speed Type"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#speed","text":"The speed to move away from the target at. The units of this value depend on the Speed Type property.","title":"Speed"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#deleteadd-new","text":"Create a new instance of this steering action or delete an existing instance.","title":"Delete/Add New"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#createstring-instancename","text":"Create a new steering action with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#trygetstring-instancename","text":"Try to get an existing steering action with the given name. Returns null if there is no action with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForPursue/#bool-trydeletestring-instancename","text":"Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetSpeed/","text":"SteerForTargetSpeed \u2693\ufe0e This MonoBehaviour causes an agent to move forwards at a given speed. Inspector \u2693\ufe0e Name \u2693\ufe0e The unique ID of this steering action. Used to identify this instance in scripts. Weight \u2693\ufe0e The importance of this action relative to other steering actions. Speed Type \u2693\ufe0e The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ). Speed \u2693\ufe0e The speed to move towards the target at. The units of this value depend on the Speed Type property. Delete/Add New \u2693\ufe0e Create a new instance of this steering action or delete an existing instance. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new steering action with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing steering action with the given name. Returns null if there is no action with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"SteerForTargetSpeed"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetSpeed/#steerfortargetspeed","text":"This MonoBehaviour causes an agent to move forwards at a given speed.","title":"SteerForTargetSpeed"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetSpeed/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetSpeed/#name","text":"The unique ID of this steering action. Used to identify this instance in scripts.","title":"Name"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetSpeed/#weight","text":"The importance of this action relative to other steering actions.","title":"Weight"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetSpeed/#speed-type","text":"The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ).","title":"Speed Type"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetSpeed/#speed","text":"The speed to move towards the target at. The units of this value depend on the Speed Type property.","title":"Speed"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetSpeed/#deleteadd-new","text":"Create a new instance of this steering action or delete an existing instance.","title":"Delete/Add New"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetSpeed/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetSpeed/#createstring-instancename","text":"Create a new steering action with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetSpeed/#trygetstring-instancename","text":"Try to get an existing steering action with the given name. Returns null if there is no action with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetSpeed/#bool-trydeletestring-instancename","text":"Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetVelocity/","text":"SteerForVelocity \u2693\ufe0e This MonoBehaviour causes an agent to steer at a specified velocity (direction and speed). This is often used to implement custom steering behaviours - a script can simply set the Velocity property. Inspector \u2693\ufe0e Name \u2693\ufe0e The unique ID of this steering action. Used to identify this instance in scripts. Weight \u2693\ufe0e The importance of this action relative to other steering actions. Speed Type \u2693\ufe0e The units for the Velocity property. Direct means that the Velocity will be unchanged. Ideal means that the Velocity will be multiplied by the agent Ideal Speed (set in the Navigator ). Maximum means that the Velocity will be multiplied by the agent Maximum Speed (set in the Navigator ). Velocity \u2693\ufe0e The velocity which this agent should move at (speed and direction). Delete/Add New \u2693\ufe0e Create a new instance of this steering action or delete an existing instance. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new steering action with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing steering action with the given name. Returns null if there is no action with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"SteerForTargetVelocity"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetVelocity/#steerforvelocity","text":"This MonoBehaviour causes an agent to steer at a specified velocity (direction and speed). This is often used to implement custom steering behaviours - a script can simply set the Velocity property.","title":"SteerForVelocity"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetVelocity/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetVelocity/#name","text":"The unique ID of this steering action. Used to identify this instance in scripts.","title":"Name"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetVelocity/#weight","text":"The importance of this action relative to other steering actions.","title":"Weight"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetVelocity/#speed-type","text":"The units for the Velocity property. Direct means that the Velocity will be unchanged. Ideal means that the Velocity will be multiplied by the agent Ideal Speed (set in the Navigator ). Maximum means that the Velocity will be multiplied by the agent Maximum Speed (set in the Navigator ).","title":"Speed Type"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetVelocity/#velocity","text":"The velocity which this agent should move at (speed and direction).","title":"Velocity"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetVelocity/#deleteadd-new","text":"Create a new instance of this steering action or delete an existing instance.","title":"Delete/Add New"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetVelocity/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetVelocity/#createstring-instancename","text":"Create a new steering action with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetVelocity/#trygetstring-instancename","text":"Try to get an existing steering action with the given name. Returns null if there is no action with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForTargetVelocity/#bool-trydeletestring-instancename","text":"Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/","text":"SteerForWander \u2693\ufe0e This MonoBehaviour causes an agent to steer randomly. It is not pure random noise as that would look very jittery and not at all natural. Inspector \u2693\ufe0e Name \u2693\ufe0e The unique ID of this steering action. Used to identify this instance in scripts. Wander Scale \u2693\ufe0e The size of the wander. A small scale will rapidly change direction very frequently. A large scale will slowly change direction more rarely. Wander Type \u2693\ufe0e Select if the noise used will be simplex or worley. Simplex noise is more random - the agent will smoothly change direction most of the time. Worley noise is more irregular - the agent will wander a short distance in a direction before more rapidly turning to a new direction. Weight \u2693\ufe0e The importance of this action relative to other steering actions. Speed Type \u2693\ufe0e The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ). Speed \u2693\ufe0e The speed to wander at. The units of this value depend on the Speed Type property. Delete/Add New \u2693\ufe0e Create a new instance of this steering action or delete an existing instance. Scripting \u2693\ufe0e Create(string instanceName) \u2693\ufe0e Create a new steering action with the given name. If the name is null a random name will be chosen. TryGet(string instanceName) \u2693\ufe0e Try to get an existing steering action with the given name. Returns null if there is no action with that name. bool TryDelete(string instanceName) \u2693\ufe0e Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"SteerForWander"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/#steerforwander","text":"This MonoBehaviour causes an agent to steer randomly. It is not pure random noise as that would look very jittery and not at all natural.","title":"SteerForWander"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/#name","text":"The unique ID of this steering action. Used to identify this instance in scripts.","title":"Name"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/#wander-scale","text":"The size of the wander. A small scale will rapidly change direction very frequently. A large scale will slowly change direction more rarely.","title":"Wander Scale"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/#wander-type","text":"Select if the noise used will be simplex or worley. Simplex noise is more random - the agent will smoothly change direction most of the time. Worley noise is more irregular - the agent will wander a short distance in a direction before more rapidly turning to a new direction.","title":"Wander Type"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/#weight","text":"The importance of this action relative to other steering actions.","title":"Weight"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/#speed-type","text":"The units for the Speed property. Direct means that the Speed setting is a speed in units/second. Ideal means that the Speed is a multiplier of the ideal speed (set in the Navigator ). Maximum means that the Speed is a multiplier of the maximum speed (set in the Navigator ).","title":"Speed Type"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/#speed","text":"The speed to wander at. The units of this value depend on the Speed Type property.","title":"Speed"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/#deleteadd-new","text":"Create a new instance of this steering action or delete an existing instance.","title":"Delete/Add New"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/#scripting","text":"","title":"Scripting"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/#createstring-instancename","text":"Create a new steering action with the given name. If the name is null a random name will be chosen.","title":"Create(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/#trygetstring-instancename","text":"Try to get an existing steering action with the given name. Returns null if there is no action with that name.","title":"TryGet(string instanceName)"},{"location":"Reference/MonoBehaviours/Steering/SteerForWander/#bool-trydeletestring-instancename","text":"Try to delete the steering action with the given name. Returns true if an action with that name existed and was deleted.","title":"bool TryDelete(string instanceName)"},{"location":"Reference/MonoBehaviours/Zones/NegativeZone/","text":"Negative Zone \u2693\ufe0e Increases the danger sensed in a certain direction for agents within the zone. Only affects agents with Negative Zones enabled. Can be used to encourage the crowd to flow in certain directions in crowded areas. For example a negative zone can be be set up across a corridor - this discourages agents moving across the corridor rather than along it. Inspector \u2693\ufe0e Angle Degrees \u2693\ufe0e Set the direction which this zone detects as a danger. Bidirectional \u2693\ufe0e If enabled this zone detects danger in two opposite directions. If disable this zone detects danger in all but one direction. The gizmo indicates which directions danger is detected by a line terminated with a bar. Directions in which danger is not detected are indicated with an arrow: Negative Weight \u2693\ufe0e Set the negative weight that this zone creates in agents which are facing towards the discouraged directions. Setup \u2693\ufe0e Physics zones require the Unity.Physics package to be installed. For a zone to work 3 other MonoBehaviours are required: Physics Shape Physics Body Convert To Entity","title":"NegativeZone"},{"location":"Reference/MonoBehaviours/Zones/NegativeZone/#negative-zone","text":"Increases the danger sensed in a certain direction for agents within the zone. Only affects agents with Negative Zones enabled. Can be used to encourage the crowd to flow in certain directions in crowded areas. For example a negative zone can be be set up across a corridor - this discourages agents moving across the corridor rather than along it.","title":"Negative Zone"},{"location":"Reference/MonoBehaviours/Zones/NegativeZone/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Zones/NegativeZone/#angle-degrees","text":"Set the direction which this zone detects as a danger.","title":"Angle Degrees"},{"location":"Reference/MonoBehaviours/Zones/NegativeZone/#bidirectional","text":"If enabled this zone detects danger in two opposite directions. If disable this zone detects danger in all but one direction. The gizmo indicates which directions danger is detected by a line terminated with a bar. Directions in which danger is not detected are indicated with an arrow:","title":"Bidirectional"},{"location":"Reference/MonoBehaviours/Zones/NegativeZone/#negative-weight","text":"Set the negative weight that this zone creates in agents which are facing towards the discouraged directions.","title":"Negative Weight"},{"location":"Reference/MonoBehaviours/Zones/NegativeZone/#setup","text":"Physics zones require the Unity.Physics package to be installed. For a zone to work 3 other MonoBehaviours are required: Physics Shape Physics Body Convert To Entity","title":"Setup"},{"location":"Reference/MonoBehaviours/Zones/PriorityZone/","text":"Priority Zone \u2693\ufe0e Increases the priority of agents within a physics volume. Lower priority agents yield to higher priority agents when a collision is imminent. Inspector \u2693\ufe0e Priority \u2693\ufe0e The amount of priority to add to agents in the zone. Only affects agents with Enable Priority Zones enabled. Setup \u2693\ufe0e Physics zones require the Unity.Physics package to be installed. For a zone to work 3 other MonoBehaviours are required: Physics Shape Physics Body Convert To Entity","title":"PriorityZone"},{"location":"Reference/MonoBehaviours/Zones/PriorityZone/#priority-zone","text":"Increases the priority of agents within a physics volume. Lower priority agents yield to higher priority agents when a collision is imminent.","title":"Priority Zone"},{"location":"Reference/MonoBehaviours/Zones/PriorityZone/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Zones/PriorityZone/#priority","text":"The amount of priority to add to agents in the zone. Only affects agents with Enable Priority Zones enabled.","title":"Priority"},{"location":"Reference/MonoBehaviours/Zones/PriorityZone/#setup","text":"Physics zones require the Unity.Physics package to be installed. For a zone to work 3 other MonoBehaviours are required: Physics Shape Physics Body Convert To Entity","title":"Setup"},{"location":"Reference/MonoBehaviours/Zones/UrgencyZone/","text":"Urgency Zone \u2693\ufe0e Increases the Urgency of agents within the physics volume. Urgency helps individual agents push through crowded areas. Inspector \u2693\ufe0e Urgency \u2693\ufe0e The amount of urgency to add to agents in the zone. Only affects agents with Zone Urgency enabled. Setup \u2693\ufe0e Physics zones require the Unity.Physics package to be installed. For a zone to work 3 other MonoBehaviours are required: Physics Shape Physics Body Convert To Entity","title":"UrgencyZone"},{"location":"Reference/MonoBehaviours/Zones/UrgencyZone/#urgency-zone","text":"Increases the Urgency of agents within the physics volume. Urgency helps individual agents push through crowded areas.","title":"Urgency Zone"},{"location":"Reference/MonoBehaviours/Zones/UrgencyZone/#inspector","text":"","title":"Inspector"},{"location":"Reference/MonoBehaviours/Zones/UrgencyZone/#urgency","text":"The amount of urgency to add to agents in the zone. Only affects agents with Zone Urgency enabled.","title":"Urgency"},{"location":"Reference/MonoBehaviours/Zones/UrgencyZone/#setup","text":"Physics zones require the Unity.Physics package to be installed. For a zone to work 3 other MonoBehaviours are required: Physics Shape Physics Body Convert To Entity","title":"Setup"},{"location":"Reference/Other/PathfindingResult/","text":"PathfindingResult \u2693\ufe0e This structure represents the result of a pathfinding job which has completed. Script Properties \u2693\ufe0e Status \u2693\ufe0e The full status of the pathfind. See Unity PathQueryStatus . Start \u2693\ufe0e The start location of the pathfind. See also: NavMeshLocation . End \u2693\ufe0e The end location of the pathfind. See also: NavMeshLocation . IsDisposed \u2693\ufe0e Indicates if this result has been disposed. No path data can be retrieved once IsDisposed is true . IsFailure \u2693\ufe0e Indicates if the pathfind failed to compute a path to the destination. Script Methods \u2693\ufe0e NativeSlice< PathfindingResultPolygon >? TryGetPathPolygons() \u2693\ufe0e Attempts to retrieve the polygons along the path. This returns a NativeSlice , which will only remain valid until this PathfindingResult is disposed. NativeSlice< PathfindingResultPortal >? TryGetPathPortals() \u2693\ufe0e Attempts to retrieve the portals along the path. The \"portals\" are the edges which connect polygons along the path, the agent must pass through each portal to follow the path. This returns a NativeSlice , which will only remain valid until this PathfindingResult is disposed. Dispose() \u2693\ufe0e Disposes this object, freeing all the memory used to store the result. This must be called to prevent a memory leak!","title":"PathfindingResult"},{"location":"Reference/Other/PathfindingResult/#pathfindingresult","text":"This structure represents the result of a pathfinding job which has completed.","title":"PathfindingResult"},{"location":"Reference/Other/PathfindingResult/#script-properties","text":"","title":"Script Properties"},{"location":"Reference/Other/PathfindingResult/#status","text":"The full status of the pathfind. See Unity PathQueryStatus .","title":"Status"},{"location":"Reference/Other/PathfindingResult/#start","text":"The start location of the pathfind. See also: NavMeshLocation .","title":"Start"},{"location":"Reference/Other/PathfindingResult/#end","text":"The end location of the pathfind. See also: NavMeshLocation .","title":"End"},{"location":"Reference/Other/PathfindingResult/#isdisposed","text":"Indicates if this result has been disposed. No path data can be retrieved once IsDisposed is true .","title":"IsDisposed"},{"location":"Reference/Other/PathfindingResult/#isfailure","text":"Indicates if the pathfind failed to compute a path to the destination.","title":"IsFailure"},{"location":"Reference/Other/PathfindingResult/#script-methods","text":"","title":"Script Methods"},{"location":"Reference/Other/PathfindingResult/#nativeslicepathfindingresultpolygon-trygetpathpolygons","text":"Attempts to retrieve the polygons along the path. This returns a NativeSlice , which will only remain valid until this PathfindingResult is disposed.","title":"NativeSlice&lt;PathfindingResultPolygon>? TryGetPathPolygons()"},{"location":"Reference/Other/PathfindingResult/#nativeslicepathfindingresultportal-trygetpathportals","text":"Attempts to retrieve the portals along the path. The \"portals\" are the edges which connect polygons along the path, the agent must pass through each portal to follow the path. This returns a NativeSlice , which will only remain valid until this PathfindingResult is disposed.","title":"NativeSlice&lt;PathfindingResultPortal>? TryGetPathPortals()"},{"location":"Reference/Other/PathfindingResult/#dispose","text":"Disposes this object, freeing all the memory used to store the result. This must be called to prevent a memory leak!","title":"Dispose()"},{"location":"Reference/Other/PathfindingResultPolygon/","text":"PathfindingResultPolygon \u2693\ufe0e Represents an edge connecting two polygons in a path. See Unity GetPortalsPoints . Script Properties \u2693\ufe0e Left \u2693\ufe0e The left end of the connecting edge. Right \u2693\ufe0e The right end of the connecting edge.","title":"PathfindingResultPolygon"},{"location":"Reference/Other/PathfindingResultPolygon/#pathfindingresultpolygon","text":"Represents an edge connecting two polygons in a path. See Unity GetPortalsPoints .","title":"PathfindingResultPolygon"},{"location":"Reference/Other/PathfindingResultPolygon/#script-properties","text":"","title":"Script Properties"},{"location":"Reference/Other/PathfindingResultPolygon/#left","text":"The left end of the connecting edge.","title":"Left"},{"location":"Reference/Other/PathfindingResultPolygon/#right","text":"The right end of the connecting edge.","title":"Right"},{"location":"Reference/Other/PathfindingResultPortal/","text":"PathfindingResultPortal \u2693\ufe0e Represents a single Polygon in the Navigation Mesh. See Unity PolygonId .","title":"PathfindingResultPortal"},{"location":"Reference/Other/PathfindingResultPortal/#pathfindingresultportal","text":"Represents a single Polygon in the Navigation Mesh. See Unity PolygonId .","title":"PathfindingResultPortal"},{"location":"Reference/Other/PathfindingTask/","text":"PathfindingTask \u2693\ufe0e This structure represents a pathfinding job which is still running. Script Properties \u2693\ufe0e IsComplete \u2693\ufe0e Indicates if the pathfinding task is complete, TryGetResult will return a value once this is true. IsDisposed \u2693\ufe0e Indicates if this task has been disposed. A result will never be returned once IsDisposed is true . Script Methods \u2693\ufe0e PathfindingResult ? TryGetResult() \u2693\ufe0e Attempts to retrieve a result from this task. Will return null until the task is complete. Once TryGetResult has returned a value the task is automatically disposed and it will not return a result again. Dispose() \u2693\ufe0e Cancels the pathfinding task. A result will never be returned once this has been called.","title":"PathfindingTask"},{"location":"Reference/Other/PathfindingTask/#pathfindingtask","text":"This structure represents a pathfinding job which is still running.","title":"PathfindingTask"},{"location":"Reference/Other/PathfindingTask/#script-properties","text":"","title":"Script Properties"},{"location":"Reference/Other/PathfindingTask/#iscomplete","text":"Indicates if the pathfinding task is complete, TryGetResult will return a value once this is true.","title":"IsComplete"},{"location":"Reference/Other/PathfindingTask/#isdisposed","text":"Indicates if this task has been disposed. A result will never be returned once IsDisposed is true .","title":"IsDisposed"},{"location":"Reference/Other/PathfindingTask/#script-methods","text":"","title":"Script Methods"},{"location":"Reference/Other/PathfindingTask/#pathfindingresult-trygetresult","text":"Attempts to retrieve a result from this task. Will return null until the task is complete. Once TryGetResult has returned a value the task is automatically disposed and it will not return a result again.","title":"PathfindingResult? TryGetResult()"},{"location":"Reference/Other/PathfindingTask/#dispose","text":"Cancels the pathfinding task. A result will never be returned once this has been called.","title":"Dispose()"}]}